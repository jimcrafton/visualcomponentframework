<!--
Copyright (c) 2000-2003, Jim Crafton
All rights reserved.
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:
	Redistributions of source code must retain the above copyright
	notice, this list of conditions and the following disclaimer.

	Redistributions in binary form must reproduce the above copyright
	notice, this list of conditions and the following disclaimer in 
	the documentation and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS
OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS 
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

NB: This software will not save the world.
-->

<chapter><title>Getting Started</title>
		<para>
		The quickest way to start using the VCF is to look at the example code 
		that comes with it. These tutorials are fully documented within the VCF 
		online documentation here(insert url) and the source code itself is fully 
		commented. Each tutorial tries to explain one particular aspect of 
		programming with the VCF.
		</para>
		<para>
		But before you can get the tutorials you first have to get the VCF installed 
		on your system. For that, please download the latest installer (for Win32 
		systems) or .tgz file for your operating system.
		</para>
		<para>
		Once you've installed the VCF try out the examples. The examples can be 
		found in your vcf/examples directory. 
		</para>
		<section><title>A very simple VCF Application</title>
			<para>
			This will explain the very basics of creating a "Hello World" application 
			with the VCF.
			</para>			
			<para>
			This simple application will demonstrate creating a VCF::Application 
			instance and displaying a main window, with "Hello World" in it's 
			caption bar.
			</para>
			<para>
			The simplest full VCF application, in other words, one that uses the 
			Application class as it's starting point, as opposed to just using 
			certain pieces of it, needs only a few lines of code in a main() function, 
			like the following:
			</para>
			<programlisting>
int main(int argc, char *argv[])
{
	Application* app = new Application(argc,argv);

	Application::main();
}
			</programlisting>			
			<para>
			Those two lines of code are all that is needed to create your app instance 
			on the stack, and then start the app running, by calling the static 
			Application::main() function. If you are using the VCF Application class 
			features, like we are here, then there can only be one instance of a 
			Application derived class for the running process, much like the restrictions 
			that apply to MFC's CWinApp.  Once you have this instance it is neccessary 
			to start the app up by calling Application::main() function, passing 
			in the number of arguments and the argument array of strings. This is 
			processed internally and calls the applications initRunningApplication() 
			and then the run loop, which starts the message pump up. From there 
			on in you are processing windows messages. 
			</para>
			<para>
			Well this by itself is not that interesting, so lets add a window.
			</para>
			<programlisting>
int main(int argc, char *argv[])
{
	Application* app = new Application(argc,argv);
	
	Window* mainWindow = new Window();

	Application::main();
}
			</programlisting>
			<para>
			This creates our new window on the heap. This is the preferred way of 
			creating most objects in the VCF, with a few exceptions. Next we need 
			to set the application's main window. In doing this the application 
			is able to register itself as a listener to the windows window events 
			(via a call to addWindowListener()), and will be notified when the window 
			closes itself. At this point the application will in turn terminate 
			it self cleanly and shut down. Failure to do this will prevent the Application 
			of being notified to close correctly, and it will not be able to free 
			up the heap based memory for the Window object.
			</para>

			<programlisting>
int main(int argc, char *argv[])
{
	Application* app = new Application(argc, argv);
	
	Window* mainWindow = new Window();
	
	app->setMainWindow( mainWindow );

	Application::main();
}
			</programlisting>
			<para>
			Well this is still pretty boring so lets set the windows caption and then display it.
			</para>
			
			<programlisting>
int main(int argc, char *argv[])
{
	Application* app = new Application(argc, argv);
	
	Window* mainWindow = new Window();
	
	app->setMainWindow( mainWindow );

	mainWindow->setCaption( "Hello World" );

	mainWindow->show();

	Application::main();
}
			</programlisting>
			<para>
			And there you have it: a window will magically display itself, with 
			a caption that reads "Hello World". The caption is set via the setCaption() 
			method, and the windows is made visible via the show() method. Alternatively, 
			we could have made the window visible by calling the setVisible() with 
			a true bool value.
			</para>
			<para>			
			Most of this was pretty easy, with the only odd thing the missing WinMain(). 
			This is circumvented by setting some custom linker settings: in the 
			output section of the project setting's Link tab, you specify mainCRTStartup 
			as the Entry-point symbol, and make sure your /subsystem flag is set 
			to /subsystem:windows not /subsystem:console. With this set you can 
			go about your merry way and still use main() just like normal.
			</para>
		</section>
		<section><title>Understanding the VCF directory tree</title>
			<para>
				The VCF is organized into a series of subdirectories all under 
				the main VCF root directory. All the source code is contained under
				the src directory. This includes third party libraries like	AGG, 
				FreeImage, and other code. Third party libraries are stored in the 
				src/thirdparty directory. Documentation is contained in the docs 
				directory and consists of all the HTML and images necessary for 
				creating the HTML Help files (on Win32 systems). Executable binaries 
				are kept in the bin directory, while the link libraries are kept in 
				the lib directory.
			</para>
			
			<para>
			The source code for the VCF framework itself is stored in the src/vcf directory.
			Under this directory, each library, or "kit" as we refer to them, has it's 
			own subdirectory, one for each kit. So under the src/vcf directory there's a 
			directory named "FoundationKit", one named "GraphicsKit" and so on. The source
			code to each kit, including .cpp and .h files are all stored in the kits directory.
			So if your looking where the source code to the FoundationKit is stored, you'd just
			have to look in the src/vcf/FoundationKit directory.
			</para>
			<para>
			The main header files used by each of the framework "kits" (FoundationKit, 
			GraphicsKit, ApplicationKit, etc) to pull in whatever common files are 
			needed by a developer using the particular kit are named with the form 
			"vcf/&lt;kit name&gt;/&lt;kit name&gt;.h". For example, the FoundationKit.h 
			header includes all the common headers required for developing with 
			the VCF when using the FoundationKit. So a developer writing a console 
			application that links to the FoundationKit simply needs to 
			#include "vcf/FoundationKit/FoundationKit.h" and everything else will 
			be taken care of. If you are using pre compiled headers then you would 
			want to include this file (FoundationKit.h) in your master pre compiled 
			header file (i.e. if you are used to using VC++ you would put this include 
			in your stdafx.h file). Kits that use the FoundationKit will also include 
			the FoundationKit.h in their header as well. For example, the ApplicationKit.h 
			includes the GraphicsKit.h header, which in turn includes the FoundationKit.h. 
			Thus including the ApplicationKit.h pulls in the other two major kit headers.
			</para>			
			<para>
			When writing code for the VCF itself (as opposed to simply using it in 
			your application) you must use include guards both for the outer level 
			of your header files, and for any cases that require you to include a 
			header inside of another header. For example, the following code demonstrates 
			writing a header with correct top level include guards :
			<programlisting>
//MyHeader.h
#ifndef _MYHEADER_H__
#define _MYHEADER_H__
      
//rest of code goes here

#endif //_MYHEADER_H__
			</programlisting>
			</para>
			<note>
				<para>
				The symbol for the #define has the following form which MUST be 
				followed for VCF headers. Headers for your own use outside of the 
				framework proper can take any form you want. That form is:
				<programlisting>
_VCF_&lt;name of the header in upper case - no breaks, underbars, etc&gt;_H__
				</programlisting>
				</para>
			</note>
			
			<para>
			Examples:
			</para>
			<para>
			You have added a new control control class to the VCF called LEDLabel. 
			It's header is called LEDLabel.h, so it's include guard is <symbol>_LEDLABEL_H__</symbol>
			</para>
			
			<para>
			If your code for the VCF needs to include other headers, then you must 
			wrap the #include in an include guard as well. Once again if this is 
			code for your application, then this does not apply, you can use it 
			if you want to, but you are not obligated to. If you contribute code 
			to the framework itself then you must do this. The following example 
			demonstrates this:
			<programlisting>
//MyHeader.h
#ifndef _MYHEADER_H__
#define _MYHEADER_H__
     
//this will include the ListModel header
#ifndef _LISTMODEL_H__
	#include "vcf/ApplicationKit/ListModel.h"
#endif//_LISTMODEL_H__

//rest of code goes here

#endif //_MYHEADER_H__			
			</programlisting>
			</para>
			
			<para>
			This may seem like an extra hassle (and it is) but for a framework this 
			size this helps reduce compile time and makes it more efficient to use.
			</para>
		</section>
	</chapter>

<!--	
CVS Log info
$Log$
Revision 1.4  2005/07/13 04:04:33  ddiego
updated more doc stuff.

Revision 1.3.8.1  2005/07/08 21:06:32  ddiego
updates

Revision 1.3  2004/04/03 15:48:26  ddiego
Merged over code from the 0-6-3 branch.

Revision 1.2.2.1  2004/03/30 02:48:18  ddiego
excluded EventsWithMFC project from python script. Regenned projects

Revision 1.2  2003/12/18 05:15:52  ddiego
merge from devmain-0-6-2 branch into the stable branch

Revision 1.1.2.2  2003/10/01 01:58:31  ddiego
added more faq documentation

Revision 1.1.2.1  2003/09/24 19:41:18  ddiego
switched the sgml files over to xml file extensions
made a slight adjustment to the docbook makefile

Revision 1.2  2003/05/17 20:36:52  ddiego
this is the checkin for the 0.6.1 release - represents the merge over from
the devmain-0-6-0 branch plus a few minor bug fixes

Revision 1.1.2.1  2003/03/03 03:39:49  ddiego
initial check-in of docbook vcf documentation, plus neccesary stylsheets
and images
-->
	