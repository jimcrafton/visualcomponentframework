<!--
Copyright (c) 2000-2003, Jim Crafton
All rights reserved.
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:
	Redistributions of source code must retain the above copyright
	notice, this list of conditions and the following disclaimer.

	Redistributions in binary form must reproduce the above copyright
	notice, this list of conditions and the following disclaimer in 
	the documentation and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS
OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS 
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

NB: This software will not save the world.
-->

<chapter><title>Design and Architecture</title>
	<section><title>Major Components</title>
		<para>
		This section lists the major components in the VCF Builder and what they do
		</para>
		<section><title>VCF Application</title>
		<para>
		This is the VCF Builder executable's application object. It does little otehr than show the 
		main VCF Builder window, and then hand's off the rest of the work to the VCF Builder
		UI library.		
		</para>
		</section>
		
		<section><title>VCF Builder UI</title>
			<para>
			This is the library application that is responsible for all of the core VCF Builder
			UI. It contains the primary dialogs and application logic for interacting with 
			other objects in the system. Some of these other objects include the Workspace, Project
			and plugins.
			</para>
		</section>
		
		<section><title>Plugin Manager and Plug-ins</title>
			<para>
			The Plug-in Manager does the initial load up of a plug-in, initializes the library
			with the UI Application, and stores common information for each plug-in.
			</para>
			<para>
			A Root directory is specified where all plugins live. One or more plug-ins are contained
			by a VCF Package Library (VPL), a Dll/SO lib with a .vpl extension. Each plugin lives in this top level
			directory, or in a sub directory. 
			<note>
				<para>
				The initial implementation will only search the top level directory.
				</para>
			</note>
			</para>
			<para>			
			Each library will be dynamically loaded. Once loaded, the library will be initialized by calling
			an exported c function called <symbol>init()</symbol>. Within the init() function the library
			will register all of it's classes with the VCF::ClassRegistry (via the REGISTER_CLASSINFO()
			macro). It will also register itself with the Plugin Manager by calling the Plugin Manager's 
			registerPackage(), and, for each plugin within the library, it will call the PluginManager's 
			registerPlugin(), passing in an instance of a PluginInfo class.
			</para>
			<para>
			The VPL is described in a PackageInfo class. This provides information such as the version, name,
			description, current path location, and any other information the developer wishes to expose.
			<programlisting>
			<![CDATA[
class PackageInfo {
public:
	String getName();
	String getUUID();
	const VersionInfo& getVersion();
	FilePath getPath();
}
			]]>
			</programlisting>
			</para>
			<para>
			A VPL may have more than one plugin. A plug-in consists of an instance of the PluginInfo class,
			which gives read only information about the plug-in itself, and, most importantly, the UUID 
			neccessary to create a new instance of the actual plug-in itself. In addition to the PluginInfo
			class, the actual plug-in, that is part of the VPL, <emphasis>must</emphasis> be registered 
			with the VCF::ClassRegistry class, or else it will not be able to be used.
			</para>
			<para>
			The PluginInfo class provides some basic information about a specific plugin, namely the plugin name, the 
			version, the plug-in's UUID, and the plug-in's mime info. Finally it also includes a way to retreive
			arbitrary data (in string format) from the plug-in. 
			<programlisting>
			<![CDATA[
class PluginInfo {
public:
	String getName();
	String getUUID();
	VersionInfo getVersion();
	String getMimeInfo();
	String getValueFromName( const String& name );  
}
			]]>
			</programlisting>
			</para>
			<para>
			Version information is stored in a VersionInfo class that supports various comparison operators, such as &gt;,
			&lt;, &gt;=, &lt;=, ==, and !=. Calling the Object::toString() will convert the data in the VersionInfo intance
			to a human readable string suitable for displaing information.
			</para>
			
			<section><title>Plugin Types</title>
				<para>
				There are several types of plugins. Each type is identied by it's mime identifier via the PluginInfo::getMimeInfo()
				method. The VCF Builder's Plugin Manager uses these types to organize the plugins and be able to hand off the 
				correct UUID when createing an instance of the Plugin at runtime. Failure to properly identify your plugin will 
				mean that the VCF Builder will be unable to correctly load/create your plugin instance at run time.
				</para>
				<para>
				The PluginInfo classes uses mime types to differentiate between types. 
				<table frame="none">
					<tgroup cols="4" align="left" colsep="1" rowsep="1">
						<thead>
							<row>
								<entry>Type</entry>
								<entry>Subtype</entry>
								<entry>Description</entry>
								<entry>Interfaces implemented</entry>
							</row>							
						</thead>
						<tbody>
							<row>
								<entry>application</entry>
								<entry>x-vpl-plugin;type="doc-editor"</entry>
								<entry>A plugin capable of editing documents.</entry>
								<entry><link linkend="EditableDocument">VCFBuilder::EditableDocument</link></entry>
							</row>
							
							<row>
								<entry>application</entry>
								<entry>x-vpl-plugin;type="code-gen"</entry>
								<entry>A plugin capable of generating source
								code for a specific language.</entry>
								<entry><link linkend="CodeGenerator">VCFBuilder::CodeGenerator</link></entry>
							</row>
							
							<row>
								<entry>application</entry>
								<entry>x-vpl-plugin;type="code-parser"</entry>
								<entry>A plugin capable of parsing code for a 
								specific language.</entry>
								<entry><link linkend="CodeParser">VCFBuilder::CodeParser</link></entry>
							</row>
							
							<row>
								<entry>application</entry>
								<entry>x-vpl-plugin;type="version-control"</entry>
								<entry>A plugin capable of connecting to a version control system
								and keeping track of files.</entry>
								<entry><link linkend="VersionControl">VCFBuilder::VersionControl</link></entry>
							</row>
							
							<row>
								<entry>application</entry>
								<entry>x-vpl-plugin;type="config-manager"</entry>
								<entry>A plugin capable of configuring a toolchain.</entry>
								<entry><link linkend="ConfigurationManager">VCFBuilder::ConfigurationManager</link></entry>
							</row>
							
							<row>
								<entry>application</entry>
								<entry>x-vpl-plugin;type="project-editor"</entry>
								<entry>A plugin capable of editing and working with the
								project model used in the VCF Builder.</entry>
								<entry><link linkend="ProjectModelEditor">VCFBuilder::ProjectModelEditor</link></entry>
							</row>
							
							<row>
								<entry>application</entry>
								<entry>x-vpl-plugin;type="project-debugger"</entry>
								<entry>A plugin capable of debugging a project. This will
								work in concert with the project's ConfigurationManager
								plug-in.</entry>
								<entry><link linkend="Debugger">VCFBuilder::Debugger</link></entry>
							</row>
						</tbody>
					</tgroup>	
				</table>
				</para>
			</section>
		</section>
		
		<section><title>Class DOM</title>
		<para>
		The Class DOM is a graph that represents a chunk of a class description. It is capable of 
		holding the contents of a file and all the namespaces, classes, or functions the file
		holds. It is built primarily for C++ but is broad enough to handle most OO languages. 
		</para>
		<para>
		The Class DOM classes map out all the various parts needed to describe a class,
		and provide for traversal classes to traverse the class graph that gets built. 
		CodeGenerator's exist that can take a fragment of the graph and render into the specific
		language of the code generator. 
		</para>
		<para>
		The VCF Builder uses this to generate and modify source code on the fly, as well as to hold
		the contents of a parsed files.
		</para>
		</section>
		
		<section><title>Workspace</title>
		<para>
		The Workspace is a collection of projects, and does the work of maintaing the projects,
		saving and loading the workspace and project data to a file, and also stores relevant
		UI settings, such as open files, etc. The Workspace is derived from VCF::Model, and
		supports event handler connections for the Model events and also adds a workspace 
		changed event.
		</para>
		<para>
		Only one Workspace can open at a time. The Workspace file format is xml based and with 
		the same tags as xmake, plus some extra extensions used by the Workspace. A Workspace
		file may be built from the command line using xmake (the extra tags used by the Workspace
		are simply ignored by xmake). The file extension for a Workspace is <symbol>.vwsp</symbol>.
		Each project within the workspace also gets it's own file, with the extension 
		<symbol>.vcp</symbol>.
		</para>
		</section>
		
		<section><title>Project</title>
		<para>
		A Project is a collection of ProjectObjects, each of which represent a particular item.
		Each Project belongs to a single open Workspace. The ProjectObject collection
		that the Project contains can be a series of Files, Classes, Forms, and Configurations.
		</para>
		
		</section>				
		
		<section><title>Files</title>
		<para>
		A File is represented by the FileObject class, and is part of a Project. It represents the 
		contents of a file on the hard disk, or potentially on some remote machine (this might be the 
		case in the future, but is currently not supported).
		</para>
		</section>
		
		<section><title>Classes</title>
		<para>
		Classes are represented by the GenericClass class, and are part of a Project. 
		Unlike FileObjects, which are stored in the Project's xml file, Classes are generated from 
		the contents of FileObjects dynamically, as needed.
		</para>
		</section>
		
		<section><title>Forms</title>
		A Form is a class that represents a top level Window or Dialog control. A Form represents a 
		specific instance of a Window or Dialog based class in the Project. For example, if you 
		had a class called Form1 in you project that derived from VCF::Window, then you'll 
		end up with a "Form1" class object in the project, and a "Form1" Form object in your 
		project.
		</section>

		<section><title>Documents</title>
		<para>
		A Document represents a file that may or may not be part of the current project that is 
		open for editing. A Document is represented by the EditableDocument plug-in class. Each
		EditableDocument sublclass is associated with a particular mime-type, which is used 
		you open a file to determine the correct EditableDocument instance to create. 
		</para>
		<para>
		</para>
		</section>
	</section>
	<section><title>Interfaces</title>
		<section id="EditableDocument"><title>VCFBuilder::EditableDocument</title>
		<para>
		<programlisting>		
class EditableDocument : public VCF::Interface { 
public:	
	
	//required methods
	<link linkend="openFromFile">virtual void openFromFile( ProjectFile* file ) = 0;</link>
	
	<link linkend="getName">virtual VCF::String getName() = 0;</link>

	<link linkend="getRootControl">virtual VCF::Control* getRootControl() = 0;</link>

	<link linkend="supportsTextRepresentation">virtual bool supportsTextRepresentation() = 0;</link>

	<link linkend="getTextRepresentation">virtual VCF::String getTextRepresentation() = 0;</link>


	//optional methods
	<link linkend="setCurrentCharPosition">virtual void setCurrentCharPosition( const long&amp; pos ) {};</link>

	<link linkend="setCurrentLineNumber">virtual void setCurrentLineNumber( const long&amp; lineNumber ) {};</link>


	//methods that already implemented
	<link linkend="isModified">bool isModified();</link>
	
	<link linkend="getFileName">VCF::FilePath getFileName();</link>

	<link linkend="setFileName">void setFileName( const VCF::String&amp; fileName );</link>
	
	<link linkend="getFileObject">ProjectFile* getFileObject();</link>
	
	<link linkend="getOwningObject">ProjectObject* getOwningObject();</link>

	<link linkend="setOwningObject">void setOwningObject( ProjectObject* owningObject );</link>
}
		</programlisting>
		</para>
		<para>
		The EditableDocument provides a basic interface for editing files within the 
		VCF Builder. Creating an instance of this class creates the UI for it as well. The
		UI is accessed via the getRootControl() method. An EditableDocument may indicate
		that it is text based (see the supportsTextRepresentation() method ). If it does
		(supportsTextRepresentation() returns true), then you can access the text model like 
		so:
		<programlisting>
		<![CDATA[
EditableDocument* doc = //...
if ( doc>supportsTextRepresentation() ) {
  TextModel* textModel = dynamic_cast<TextModel*>( doc->getRootControl()->getModel() );
  //work with text
}
		]]>
		</programlisting>
		</para>
			<section><title>Required methods</title>
			<para id="openFromFile">
			<programlisting>
		<![CDATA[
void openFromFile( ProjectFile* file ) = 0;
			]]>		
			</programlisting>
			opens a file into the EditableDocument. The implementer should have a UI instantiated
			and be load the contents of the file into the UI. 
			</para>
			
			<para id="getName">			
			<programlisting>
VCF::String getName()
			</programlisting>			
			</para>
			
			<para id="getRootControl">
			<programlisting>
VCF::Control* getRootControl()
			</programlisting>			
			</para>
			
			<para id="supportsTextRepresentation">
			<programlisting>
bool supportsTextRepresentation()
			</programlisting>			
			</para>
			
			<para id="getTextRepresentation">
			<programlisting>
VCF::String getTextRepresentation()
			</programlisting>			
			</para>
			</section>
			
			<section><title>Optional methods</title>
			<para id="setCurrentCharPosition">
			<programlisting>
void setCurrentCharPosition( const long&amp; pos )			
			</programlisting>			
			</para>
			
			<para id="setCurrentLineNumber">
			<programlisting>
void setCurrentLineNumber( const long&amp; lineNumber )			
			</programlisting>			
			</para>
			</section>
			
			<section><title>Already implemented methods</title>
			<para id="isModified">
			<programlisting>
bool isModified()			
			</programlisting>			
			</para>
			
			<para id="getFileName">
			<programlisting>
VCF::FilePath getFileName()			
			</programlisting>			
			</para>
			
			<para id="getFileObject">
			<programlisting>
ProjectFile* getFileObject()		
			</programlisting>			
			</para>
			
			<para id="getOwningObject">
			<programlisting>
ProjectObject* getOwningObject()			
			</programlisting>			
			</para>
			
			<para id="setOwningObject">
			<programlisting>
void setOwningObject( ProjectObject* owningObject )			
			</programlisting>			
			</para>
			
			</section>
		</section>
		
		<section id="CodeGenerator"><title>VCFBuilder::CodeGenerator</title>
		<para>
		The CodeGenerator is meant to 
		</para>
		</section>
		
		<section id="CodeParser"><title>VCFBuilder::CodeParser</title>
		<para>
		</para>
		</section>
		
		<section id="VersionControl"><title>VCFBuilder::VersionControl</title>
		<para>
		</para>
		</section>
		
		<section id="ConfigurationManager"><title>VCFBuilder::ConfigurationManager</title>
		<para>
		</para>
		</section>
		
		<section id="ProjectModelEditor"><title>VCFBuilder::ProjectModelEditor</title>
		<para>
		</para>
		</section>
		
		<section id="Debugger"><title>VCFBuilder::Debugger</title>
		<para>
		</para>
		</section>
	</section>
</chapter>

<!--
$Id$
-->
