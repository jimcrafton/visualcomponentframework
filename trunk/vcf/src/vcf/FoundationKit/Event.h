#ifndef _VCF_EVENT_H__
#define _VCF_EVENT_H__
//Event.h

/*
Copyright 2000-2004 The VCF Project.
Please see License.txt in the top level directory
where you installed the VCF.
*/


#if _MSC_VER > 1000
#   pragma once
#endif


/* Generated by Together */


namespace VCF{

#define CUSTOM_EVENT_TYPES	500


/**
\class Event Event.h "vcf/FoundationKit/Event.h"
The Event class is root object for events in the Framework. 
Events are defined as any action that is generated
in response to some change in the system. Moving the mouse, 
typing on the keyboard, etc are all example of Window
System events that are generated by the User, but events 
can also be generated by an objects change in state.
For example, a text model can fire events if the state 
of it's text has changed.
*
*@version 1.0
*@author Jim Crafton
*/
class FOUNDATIONKIT_API Event : public Object {

public:

    Event( Object * source);
	Event( Object* source, const uint32& eventType );

	Event( const Event& rhs ): Object(rhs) {
		init();
		*this = rhs;
	}

	Event& operator= ( const Event& rhs ) {

		source_ = rhs.source_;
		userData_ = rhs.userData_;
		eventType_ = rhs.eventType_;

		return *this;
	}

	void init();

	/**
	*shows whether or not the event has been consumed.
	*primarily used by the Listener list implementation
	*/
	bool consumed_;

	virtual void consume() { consumed_ = true; }

	bool getConsumed() {
        return consumed_;
    }

	void setConsumed( const bool& isConsumed ){
		consumed_ = isConsumed;
	}

	bool isConsumed() {
		return consumed_;
	}

	/**
	*retrieves the events source, in other words, who actually caused the
	*event to be generated
	*/
    Object* getSource();

	/**
	*gets the type of event. Some events may not put anything useful here, but events
	*associated with Listeners that have multiple methods (like MouseListener) will
	*definitely store a flag here. See the specific event class for the exact event types
	*the event types can be set to
	*/
    uint32 getType();

	void setType( const uint32& type );

	/**
	*gets the time the event was created.
	*/
    time_t getTime();

	/*
	*sets the user data. User data is simply a place to store any sort of user specific info
	*that the programmer wants to attach to the event object. Only used by the specific application,
	*the Framework ignores this.
	*/
	void setUserData( void* userData );

	void* getUserData();

	virtual Object* clone( bool deep=false ) {
		return new Event(*this);
	}
private:
    Object* source_;
	void* userData_;
    uint32 eventType_;
    time_t time_;
};









typedef Delegate1<Event*> EventDelegate; 


typedef Procedure1<Event*> EventProcedure; 

typedef EventProcedure EventHandler;

//typedef CallBack EventHandler;






inline Event::Event( Object * source)
{
	source_ = source;
	userData_ = NULL;
	eventType_ = 0;
	init();
}

inline Event::Event( Object* source, const uint32& eventType )
{
	source_ = source;
	userData_ = NULL;
	eventType_ = eventType;
	init();
}

inline void Event::init()
{
	consumed_ = false;
	time( &time_ );
}

inline Object* Event::getSource()
{
	return source_;
}

inline uint32 Event::getType()
{
	return eventType_;
}

inline void Event::setType( const uint32& type )
{
	eventType_ = type;
}

inline time_t Event::getTime()
{
	return time_;
}

inline void Event::setUserData( void* userData )
{
	userData_ = userData;
}

inline void* Event::getUserData()
{
	return userData_;
}



};


#endif // _VCF_EVENT_H__

/**
$Id$
*/
