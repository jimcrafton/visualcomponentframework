#ifndef _VCF_STREAM_H__
#define _VCF_STREAM_H__
//Stream.h

/*
Copyright 2000-2004 The VCF Project.
Please see License.txt in the top level directory
where you installed the VCF.
*/


#if _MSC_VER > 1000
#   pragma once
#endif


/* Generated by Together */



namespace VCF{

/**
*seek types
*/
enum SeekType{
	stSeekFromStart=0,
	stSeekForwards,
	stSeekBackwards,
	stSeekFromEnd
};

/**
*file acess
*/
enum FileStreamAccessType{
	fsDontCare = 0, //same as read/write for now
	fsRead,
	fsWrite,
	fsReadWrite
};

/**
*forward declared, see Persistable.h
*/
class Persistable;



/**
\class Stream Stream.h "vcf/FoundationKit/Stream.h"
Stream interface defines a core set of funcationality for streams
in the Visual Component Framework derived Streams should support "stream chaining",
the ability of the stream constructor to support an incoming stream from
someother stream object. For example:
\code
	MyStream s = new MyStream( new MemStream( new GZIPStream( SomeBigDataObject ) ) );
\endcode
assuming SomeBigDataObject supports Persistable, then the object is read into the
GZIPStream and compressed, the compressed bytes are sent to the Memory stream, and
then this is sent to MyStream.

Streams are meant as alternative to the C++ streams, though in some
cases they may extend the standard C++ stream library.
*
@author Jim Crafton
@version 1.0
*/
class FOUNDATIONKIT_API Stream {
public:

    virtual ~Stream(){};

	virtual void seek(const uint64& offset, const SeekType& offsetFrom)=0;

	/**
	returns the size of the stream. The size represents the
	number of bytes that have been \b written, or \b read to/from the stream
	*/
    virtual uint64 getSize() =0;

	/**
	returns a pointer to the buffer that holds the stream memory
	*/
	virtual char* getBuffer() = 0;

	/**
	this is a global offset from the beggining of the stream
	*/
	virtual uint64 getCurrentSeekPos() = 0;
};

/**
\class InputStream Stream.h "vcf/FoundationKit/Stream.h"
InputStream, basic interface describing the requirements to
support streaming data into a stream. Support for the basic
primitive types is done through the extraction operator( >> ),
as well as providing support for the Persistable interface,
and reading in an arbitrary chunk of memory
*/
class FOUNDATIONKIT_API InputStream : public Stream {
public:

	virtual ~InputStream(){};

	// new introduced by tiziano
	virtual bool isEOS() = 0;

	virtual uint32 read( unsigned char* bytesToRead, uint32 sizeOfBytes ) = 0;

	virtual void read( Persistable* persistableObject ) ;

	virtual void read( short& val ) ;

	virtual void read( unsigned short& val ) ;

	virtual void read( long& val ) ;

	virtual void read( unsigned long& val ) ;

	virtual void read( int& val ) ;

	virtual void read( unsigned int& val ) ;

	virtual void read( bool& val ) ;

	virtual void read( char& val ) ;

	virtual void read( unsigned char& val ) ;

	virtual void read( int64& val ) ;

	virtual void read( uint64& val ) ;

	virtual void read( float& val ) ;

	virtual void read( double& val ) ;

	virtual void read( String& val ) ;

	InputStream& operator>>( unsigned short& val );

	InputStream& operator>>( short& val );

	InputStream& operator>>( long& val );

	InputStream& operator>>( unsigned long& val );

	InputStream& operator>>( int& val );

	InputStream& operator>>( unsigned int& val );

	InputStream& operator>>( bool& val );

	InputStream& operator>>( char& val );

	InputStream& operator>>( unsigned char& val );

	InputStream& operator>>( int64& val );

	InputStream& operator>>( uint64& val );

	InputStream& operator>>( float& val );

	InputStream& operator>>( double& val );

	InputStream& operator>>( String& val );

	InputStream& operator>>( Persistable* val );
};

/**
\class OutputStream Stream.h "vcf/FoundationKit/Stream.h"
OutputStream, basic interface describing the requirements to
support streaming data into a stream. Support for the basic
primitive types is done through the insertion operator( << ),
as well as providing support for the Persistable interface,
and writing out an arbitrary chunk of memory
*/
class FOUNDATIONKIT_API OutputStream : public Stream {
public:
	virtual ~OutputStream(){};

	virtual uint32 write( const unsigned char* bytesToWrite, uint32 sizeOfBytes )=0;

	virtual void write( Persistable* persistableObject );

	virtual void write( const short& val );

	virtual void write( const unsigned short& val );

	virtual void write( const long& val );

	virtual void write( const unsigned long& val );

	virtual void write( const int& val );

	virtual void write( const unsigned int& val );

	virtual void write( const bool& val );

	virtual void write( const char& val );

	virtual void write( const unsigned char& val );

	virtual void write( const int64& val );

	virtual void write( const uint64& val );

	virtual void write( const float& val );

	virtual void write( const double& val );

	virtual void write( const String& val );

	OutputStream& operator<<( const short& val );

	OutputStream& operator<<( const unsigned short& val );

	OutputStream& operator<<( const long& val );

	OutputStream& operator<<( const unsigned long& val );

	OutputStream& operator<<( const int& val );

	OutputStream& operator<<( const unsigned int& val );

	OutputStream& operator<<( const bool& val );

	OutputStream& operator<<( const char& val );

	OutputStream& operator<<( const unsigned char& val );

	OutputStream& operator<<( const int64& val );

	OutputStream& operator<<( const uint64& val );

	OutputStream& operator<<( const float& val );

	OutputStream& operator<<( const double& val );

	OutputStream& operator<<( const String& val );

	OutputStream& operator<<( Persistable* val );
};



};


#endif // _VCF_STREAM_H__

/**
$Id$
*/
