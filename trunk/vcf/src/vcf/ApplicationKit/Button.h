#ifndef _VCF_BUTTON_H__
#define _VCF_BUTTON_H__
//Button.h

/*
Copyright 2000-2004 The VCF Project.
Please see License.txt in the top level directory
where you installed the VCF.
*/


#if _MSC_VER > 1000
#   pragma once
#endif


/* Generated by Together */


namespace VCF {

class ButtonListener;

enum ButtonCommandType{
	BC_NONE=0,
	BC_OK,
	BC_CANCEL,
	BC_YES,
	BC_NO,
	BC_MAYBE,
	BC_HELP,
	BC_IGNORE,
	BC_RETRY,
	BC_ABORT,
};

static String ButtonCommandTypeNames[] = { "BC_NONE",
                                         "BC_OK",
										 "BC_CANCEL",
										 "BC_YES",
										 "BC_NO",
										 "BC_MAYBE",
										 "BC_HELP",
										 "BC_IGNORE",
										 "BC_RETRY",
										 "BC_ABORT"};



/**
\class Button Button.h "vcf/ApplicationKit/Button.h"
*The Button interface represents a standard set of behaviours
*for any control that wishes to act like a button. Currently the
*basic behaviour is to fire click events when the click() method
*is invoked.
*/
class APPLICATIONKIT_API Button {
public:
	virtual ~Button(){}
	
	/**
	*This represents the user pressing the button,
	*which then invokes whatever command is associated
	*with the button. It should be called in the implementing
	*controls class whenever the control is "clicked" on
	*(see Control::mouseClick() ), it can also be called
	*programmatically as well.
	*/
	virtual void click() = 0;

	/**
	*sets this button as the default button. A default
	*button will have it's click() event called whenever
	*the enter key is hit.
	*/
	virtual void setDefault( const bool& defaultButton ) = 0;

	virtual bool isDefault() = 0;

	/**
	*Adds a new EventHandler for button click events
	*/
	virtual void addButtonClickHandler( EventHandler* handler ) = 0;

	/**
	*Removes an EventHandler for button click events
	*/
	virtual void removeButtonClickHandler( EventHandler* handler ) = 0;

};


}; // namespace VCF


#endif // _VCF_BUTTON_H__

/**
$Id$
*/
