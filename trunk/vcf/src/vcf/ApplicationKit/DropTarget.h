#ifndef _VCF_DROPTARGET_H__
#define _VCF_DROPTARGET_H__
//DropTarget.h

/*
Copyright 2000-2004 The VCF Project.
Please see License.txt in the top level directory
where you installed the VCF.
*/


#if _MSC_VER > 1000
#   pragma once
#endif


/* Generated by Together */






namespace VCF{

class Control;

class DropTargetPeer;


/**
\class DropTargetEvent DropTarget.h "vcf/ApplicationKit/DropTarget.h"
Drop event are fired when an object is dropped during a drag drop operation.
 */
class APPLICATIONKIT_API DropTargetEvent : public Event {


public:

	DropTargetEvent( Object* source, DataObject* data ):
		Event( source ),
		keyMask_(0),
		buttonMask_(0),
		data_(data),
		action_(daNone) {
	 };

	DropTargetEvent( const DropTargetEvent& rhs ):Event(rhs) {
		*this = rhs;
	}

	virtual ~DropTargetEvent(){};


	DropTargetEvent& operator=( const DropTargetEvent& rhs ) {
		Event::operator =( rhs );

		keyMask_ = rhs.keyMask_;
		buttonMask_ = rhs.buttonMask_;
		data_ = rhs.data_;
		dropPoint_ = rhs.dropPoint_;
		action_ = rhs.action_;

		return *this;
	}


	virtual Object* clone( bool deep=false ) {
		return new DropTargetEvent(*this);
	}


    uint32 getButtonMask() {
		return buttonMask_;
	}

	void setButtonMask( const uint32& buttonMask ) {
		buttonMask_ = buttonMask;
	}

    uint32 getKeyMask() {
		return keyMask_;
	}

	void setKeyMask( const uint32& keyMask ) {
		keyMask_ = keyMask;
	}

    DataObject* getDataObject() {
		return data_;
	}

    Point getDropPoint() {
		return dropPoint_;
	}

	void setDropPoint( const Point& point ) {
		dropPoint_ = point;
	}

	void setActionType( const DragActionType& action ) {
		action_ = action;
	}

	/**
	*get the type of action the event represents
	*/
	DragActionType getAction() {
		return action_;
	}
protected:
    uint32 keyMask_;
    uint32 buttonMask_;
    DataObject * data_;
    Point dropPoint_;
	DragActionType action_;
};


typedef Delegate1<DropTargetEvent*> DropTargetDelegate; 





/**
The DropTarget class represents a way to control and be notified when a
something is "dropped" ( or just "dragged over" ) as a result of 
a drag-drop operation.
In this way, for example, the mouse cursor can be modified according to
the control is over.

A drop target works by being registered with a control. This registration is
accomplished by calling the addTargetControl() on the drop target and passing
in a control instance. For example:
\code
TextControl* textControl = ...//get the control from somewhere
Panel* somePanel = ...//get the panel from somewhere

DropTarget dropTarget;
dropTarget.addTargetControl( textControl );
dropTarget.addTargetControl( somePanel );

\endcode

@delegates
	@del DropTarget::DropTargetDraggingOver
	@del DropTarget::DropTargetDropped
	@del DropTarget::DropTargetLeft
	@del DropTarget::DropTargetEntered
*/
class APPLICATIONKIT_API DropTarget : public Component {
public:

	enum {
		DRAGGING_OVER =  CUSTOM_EVENT_TYPES + 303,
		DRAG_DROPPED,
		DRAG_LEFT,
		DRAG_ENTERED
	};

    DropTarget( Control * control );

	DropTarget();

	DropTarget( Component* owner );

	DropTarget( const String& name, Component* owner );

	DropTarget( const String& name );


	virtual ~DropTarget();

	/**
	@delegate DropTargetDraggingOver is fired by the underlying windowing system
	when a dataobject is being dragged over a registered drop target.
	@event DropTargetEvent
	@eventtype DropTarget::DRAGGING_OVER
	*/
	DELEGATE(DropTargetDelegate,DropTargetDraggingOver)

	/**
	@delegate DropTargetDropped this is fired by the windowing system when something
	is "dropped" on a control registered with the drop target
	@event DropTargetEvent
	@eventtype
	*/
	DELEGATE(DropTargetDelegate,DropTargetDropped)

	/**
	@delegate DropTargetLeft is fired by the underlying windowing system
	when the "something" being dragged has left the control registered with this
	drop target.
	@event DropTargetEvent
	@eventtype DropTarget::DRAG_LEFT
	*/
	DELEGATE(DropTargetDelegate,DropTargetLeft)

	/**
	@delegate DropTargetEntered this is fired by the underlying windowing system
	when something that is being dragged first enters the control registered with
	this drop target.
	@event DropTargetEvent
	@eventtype DropTarget::DRAG_ENTERED
	*/
	DELEGATE(DropTargetDelegate,DropTargetEntered)

	virtual void handleEvent( Event* event );

	DropTargetPeer* getDropTargetPeer();

	/**
	gets the first control in the target collection.
	Typically a DropTarget will just have a single control
	that it's associated with (though it may certainly have
	more than one).
	*/
	Control* getTarget();

	/**
	Returns all the control targets for this drop
	target.
	*/
	Enumerator<Control*>* getTargets();

	/**
	Adds a new target control to the drop target's collection
	and registers it.
	*/
	void addTargetControl( Control* control );

	void removeTargetControl( Control* control );
protected:
	DropTargetPeer* dropTargetPeer_;
	Array<Control*> targets_;
};

};


#endif // _VCF_DROPTARGET_H__

/**
$Id$
*/
