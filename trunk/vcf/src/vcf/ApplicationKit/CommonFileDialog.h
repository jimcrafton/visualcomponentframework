#ifndef _VCF_COMMONFILEDIALOG_H__
#define _VCF_COMMONFILEDIALOG_H__
//CommonFileDialog.h

/*
Copyright 2000-2004 The VCF Project.
Please see License.txt in the top level directory
where you installed the VCF.
*/


#if _MSC_VER > 1000
#   pragma once
#endif


/* Generated by Together */





namespace VCF {

class CommonFileDialogPeer;


/**
\class CommonFileDialog CommonFileDialog.h "vcf/ApplicationKit/CommonFileDialog.h"
Base class for open and save common dialogs. Provides a way for you to 
specify the types of files to display, as well as the selected 
file and directory.
*/
class APPLICATIONKIT_API CommonFileDialog : public CommonDialog {

public:
	CommonFileDialog();

	virtual ~CommonFileDialog();

	/**
	Adds a filter to the File dialog.
	This is composed of the filter name or description
	and its associated extension(s).
	@param const String& description, the description or name of the filter.
	@param const String& extension, the extension associated to the filter.
	This may be a list of extensions separated by a semicolon ( under windows )
	or any other separator depending on the OS. The dialog will display only
	the files with any extension existing in this string list.
	*/
	virtual void addFilter( const String & description, const String & extension );

	/**
	* sets the default directory whose files will be displayed in the dialog.
	*@param const String& directory, the displayed directory.
	*/
	virtual void setDirectory( const String & directory );

	/**
	* sets the default filename suggested by the dialog.
	* This may include the directory set for the dialog.
	*@param const String& filename, the default displayed filename.
	*/
	virtual void setFileName( const String & filename );

	/**
	* gets the directory chosen with the dialog.
	*@return String, the chosen directory.
	*/
	virtual String getDirectory();

	/**
	* gets the filename chosen with the dialog.
	* This includes the path to the directory chosen with the dialog.
	*@return String, the filename chosen by the user.
	*/
	virtual String getFileName();

	/**
	* gets the filter's extension chosen with the dialog.
	*@return String, the filter's extension chosen by the user.
	*/
	virtual String getFileExtension();

	/**
	* gets the filter selected the previous time this dialog has been openened.
	* If the filters are composed by pairs of strings ( the filter's name 
	* and the associated extension ), the given string is the first string
	* of the selected pair.
	*/
	virtual String getSelectedFilter();

	/**
	* sets the default selected filter for the dialog
	* The value to be set is usually the one selected the previous time 
	* the dialog has been openened.
	*@param const String& selectedFilter, the default filter to be used.
	*/
	void setSelectedFilter( const String& selectedFilter );

	/**
	* sets the flags allowing multiple selection of the items in the dialog.
	*@param const bool& allowsMultiSelect, true if allowed.
	*/
	virtual void setAllowsMultiSelect( const bool& allowsMultiSelect );

	/**
	* sets the title of the dialog.
	*@param const String& title, the title.
	*/
	virtual void setTitle( const String& title );

protected:
	/**
	* the pointer to the peer for the OS specific implementation 
	* of the File dialog.
	*/
	CommonFileDialogPeer* peer_;

};

} // namespace VCF


#endif // _VCF_COMMONFILEDIALOG_H__

/**
$Id$
*/
