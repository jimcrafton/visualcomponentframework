#ifndef _VCF_DROPEVENT_H__
#define _VCF_DROPEVENT_H__
//DropEvent.h

/*
Copyright 2000-2004 The VCF Project.
Please see License.txt in the top level directory
where you installed the VCF.
*/


#if _MSC_VER > 1000
#   pragma once
#endif


/* Generated by Together */




namespace VCF{
/**
\class DropTargetEvent DropEvent.h "vcf/ApplicationKit/DropEvent.h"
Drop event are fired when an object is dropped during a drag drop operation.
 */
class APPLICATIONKIT_API DropTargetEvent : public Event {


public:

	DropTargetEvent( Object* source, DataObject* data ):
		Event( source ),
		keyMask_(0),
		buttonMask_(0),
		data_(data),
		action_(daNone) {
	 };

	DropTargetEvent( const DropTargetEvent& rhs ):Event(rhs) {
		*this = rhs;
	}

	virtual ~DropTargetEvent(){};


	DropTargetEvent& operator=( const DropTargetEvent& rhs ) {
		Event::operator =( rhs );

		keyMask_ = rhs.keyMask_;
		buttonMask_ = rhs.buttonMask_;
		data_ = rhs.data_;
		dropPoint_ = rhs.dropPoint_;
		action_ = rhs.action_;

		return *this;
	}


	virtual Object* clone( bool deep=false ) {
		return new DropTargetEvent(*this);
	}


    uint32 getButtonMask() {
		return buttonMask_;
	}

	void setButtonMask( const uint32& buttonMask ) {
		buttonMask_ = buttonMask;
	}

    uint32 getKeyMask() {
		return keyMask_;
	}

	void setKeyMask( const uint32& keyMask ) {
		keyMask_ = keyMask;
	}

    DataObject* getDataObject() {
		return data_;
	}

    Point getDropPoint() {
		return dropPoint_;
	}

	void setDropPoint( const Point& point ) {
		dropPoint_ = point;
	}

	void setActionType( const DragActionType& action ) {
		action_ = action;
	}

	/**
	*get the type of action the event represents
	*/
	DragActionType getAction() {
		return action_;
	}
protected:
    uint32 keyMask_;
    uint32 buttonMask_;
    DataObject * data_;
    Point dropPoint_;
	DragActionType action_;
};




/**
\class DropEventHandler DropEvent.h "vcf/ApplicationKit/DropEvent.h"
*/
template <class SOURCE_TYPE>
class DropEventHandler : public EventHandlerInstance<SOURCE_TYPE,DropTargetEvent>  {
public:
	DropEventHandler( SOURCE_TYPE* source,
		_typename_ EventHandlerInstance<SOURCE_TYPE,DropTargetEvent>::OnEventHandlerMethod handlerMethod,
		const String& handlerName="") :
				EventHandlerInstance<SOURCE_TYPE,DropTargetEvent>( source, handlerMethod, handlerName ) {

	}
};



}


#endif // _VCF_DROPEVENT_H__

/**
$Id$
*/
