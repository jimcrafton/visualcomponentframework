#ifndef _VCF_DRAGSOURCE_H__
#define _VCF_DRAGSOURCE_H__
//DragSource.h

/*
Copyright 2000-2004 The VCF Project.
Please see License.txt in the top level directory
where you installed the VCF.
*/


#if _MSC_VER > 1000
#   pragma once
#endif


/* Generated by Together */



namespace VCF{


class DragDropPeer;

class DataObject;

enum DragActionType {
	daNone = 0,
	daCopy,
	daMove,
	daLink
};


class APPLICATIONKIT_API DragSourceEvent : public Event {
public:
	DragSourceEvent( Object* source, VCF::DataObject* data ):
		Event( source ){
		data_ = data;
	}

	DragSourceEvent( Object* source, VCF::DataObject* data,
		       const uint32& keyMask, const uint32& buttonMask,
			   const DragActionType& action ):
		Event( source ){
		data_ = data;
		keyMask_ = keyMask;
		buttonMask_ = buttonMask;
		action_ = action;
	}


	DragSourceEvent( const DragSourceEvent& rhs ):Event(rhs) {
		*this = rhs;
	}

	virtual ~DragSourceEvent(){};

	DragSourceEvent& operator=( const DragSourceEvent& rhs ) {
		Event::operator =( rhs );

		data_ = rhs.data_;
		keyMask_ = rhs.keyMask_;
		buttonMask_ = rhs.buttonMask_;
		action_ = rhs.action_;


		return *this;
	}

	virtual Object* clone( bool deep=false ) {
		return new DragSourceEvent(*this);
	}


	VCF::DataObject* getDataObject() {
		return data_;
	}

	uint32 getButtonMask() {
		return buttonMask_;
	}

	void setButtonMask( const uint32& buttonMask ) {
		buttonMask_ = buttonMask;
	}

    uint32 getKeyMask() {
		return keyMask_;
	}

	void setKeyMask( const uint32& keyMask ) {
		keyMask_ = keyMask;
	}

	/**
	*
	*/
	void setActionType( const DragActionType& action ) {
		action_ = action;
	}
	/**
	*get the type of action the event represents
	*/
	DragActionType getAction() {
		return action_;
	}

private:
    VCF::DataObject* data_;
	uint32 keyMask_;
    uint32 buttonMask_;
	DragActionType action_;
};

typedef Delegate1<DragSourceEvent*> DragSourceDelegate; 



/**
\class DragSource DragSource.h "vcf/ApplicationKit/DragSource.h"
The drag source represents the source, or beginning
of a drag drop operation.
@delegates
	@del DragSource::SourceBegin
	@del DragSource::SourceDropped
	@del DragSource::SourceEnd
	@del DragSource::SourceGiveFeedback
	@del DragSource::SourceCanContinueDragOp
*/
class APPLICATIONKIT_API DragSource : public Object {

public:
	enum {
		DRAG_BEGUN = CUSTOM_EVENT_TYPES + 300,
		DRAG_DROPPED,
		DRAG_GIVEFEEDBACK,
		DRAG_CANCONTINUE,
		DRAG_END
	};

	DragSource();
	virtual ~DragSource();

	void startDragDrop( DataObject* data );

    void copyDataToClipboard();

	void setActionType( const DragActionType& actionType );

	DragActionType getActionType();

	/**
	@delegate SourceBegin this is called just as the drag-drop operation is
	started, once startDragDrop() has been called.
	@event DragSourceEvent
	@see startDragDrop()
	*/
	DELEGATE(DragSourceDelegate,SourceBegin)

	/**
	@delegate SourceDropped this is fired if the drag-drop operation was successfully completed.
	@event DragSourceEvent
	@eventtype DragSource::DRAG_DROPPED
	*/
	DELEGATE(DragSourceDelegate,SourceDropped)

	/**
	@delegate SourceEnd this is called when the drag-drop operation is completed.
	It does <i>not</i> indicate whether or not the drag-drop operation was successful.
	@event DragSourceEvent
	@eventtype DragSource::DRAG_END
	*/
	DELEGATE(DragSourceDelegate,SourceEnd)

	/**
	@delegate SourceGiveFeedback this is fired when the underlying windowing system
	needs to know what kind of feed back to present the user with during the
	drag-drop operation.
	@event DragSourceEvent
	@eventtype DragSource::DRAG_GIVEFEEDBACK
	*/
	DELEGATE(DragSourceDelegate,SourceGiveFeedback)

	/**
	@delegate SourceCanContinueDragOp this is fired whenever the underlying
	windowing system needs to query whether or not the drag-drop operation
	should continue.
	@event DragSourceEvent
	@eventtype DragSource::DRAG_CANCONTINUE
	*/
	DELEGATE(DragSourceDelegate,SourceCanContinueDragOp)


protected:
    DragActionType actionType_;
    DragDropPeer * dragDropPeer_;

    DataObject * clipboardDataObject_;
};

};


#endif // _VCF_DRAGSOURCE_H__

/**
$Id$
*/
