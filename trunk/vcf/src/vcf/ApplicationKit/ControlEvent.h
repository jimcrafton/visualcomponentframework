#ifndef _VCF_CONTROLEVENT_H__
#define _VCF_CONTROLEVENT_H__
//ControlEvent.h

/*
Copyright 2000-2004 The VCF Project.
Please see License.txt in the top level directory
where you installed the VCF.
*/


#if _MSC_VER > 1000
#   pragma once
#endif


namespace VCF {


class Control;

/**
\class ControlEvent ControlEvent.h "vcf/ApplicationKit/ControlEvent.h"
*ControlEvent are events generated by changes made to the control.
*Currently there are 3 types, one for controls being resized, one for a
*control's position being changed, and one for the control's parent being
*changed.
*
*@version 1.0
*@author Jim Crafton
*/
class APPLICATIONKIT_API ControlEvent : public Event  {
public:
	ControlEvent( Object* source ):Event( source ),newParent_(NULL),gc_(NULL) {

	}

	ControlEvent( Object* source, const uint32& eventType ):Event( source,eventType ),
		newParent_(NULL),gc_(NULL) {

	}

	/**
	*use this constructor for creating CONTROL_SIZED events
	*/
	ControlEvent( Object* source, const Size& newSize ):Event( source, Control::CONTROL_SIZED ),
		newSize_(newSize), newParent_(NULL),gc_(NULL) {

	}

	/**
	*use this constructor for creating CONTROL_POSITIONED events
	*/
	ControlEvent( Object* source, const Point& newPosition ):Event( source, Control::CONTROL_POSITIONED ),
		newPosition_(newPosition), newParent_(NULL),gc_(NULL) {

	}

	/**
	*use this constructor for creating CONTROL_PARENT_CHANGED events
	*/
	ControlEvent( Object* source, Control* newParent ):Event( source, Control::CONTROL_PARENT_CHANGED ),
		newParent_(newParent),gc_(NULL) {

	}

	/**
	*use this constructor for creating BEFORE_CONTROL_PAINTED or
	AFTER_CONTROL_PAINTED events
	*/
	ControlEvent( Object* source, const uint32& eventType, GraphicsContext* gc ):Event( source, eventType ),
		newParent_(NULL),gc_(gc) {

	}


	ControlEvent( const ControlEvent& rhs ):Event(rhs) {		
		*this = rhs;
	}

	virtual ~ControlEvent() {}

	ControlEvent& operator=( const ControlEvent& rhs ) {
		Event::operator =( rhs );

		newSize_ = rhs.newSize_;
		newPosition_ = rhs.newPosition_;
		newParent_ = rhs.newParent_;

		gc_ = rhs.gc_;

		return *this;
	}

	virtual Object* clone( bool deep=false ) {
		return new ControlEvent(*this);
	}

	/**
	*returns the new size of the component
	*/
	Size getNewSize(){
		return 	newSize_;
	};

	/**
	*returns the new position of the component
	*/
	Point getNewPosition(){
		return 	newPosition_;
	};

	/**
	*returns the new parent
	*/
	Control* getNewParent(){
		return 	newParent_;
	};

	GraphicsContext* getPaintGraphicsContext() {
		return gc_;
	}
protected:
	Size newSize_;
	Point newPosition_;
	Control* newParent_;
	GraphicsContext* gc_;
};

/**
\class ControlPopupMenuMenuEvent ControlEvent.h "vcf/ApplicationKit/ControlEvent.h"
*/
class APPLICATIONKIT_API ControlPopupMenuMenuEvent : public Event {
public:
	ControlPopupMenuMenuEvent( Object* source, const uint32& eventType ): 
	  Event(source,eventType), popupMenu(NULL), cancelPopup(false){
		
	}

	PopupMenu* popupMenu;
	bool cancelPopup;

};


/**
*ControlEventHandler
*Handles the following:
*Sized
*Positioned
*ParentChanged
*/
template <class SOURCE_TYPE>
class ControlEventHandler : public EventHandlerInstance<SOURCE_TYPE,ControlEvent> {
public:
	ControlEventHandler( SOURCE_TYPE* source,
		_typename_ EventHandlerInstance<SOURCE_TYPE,ControlEvent>::OnEventHandlerMethod handlerMethod,
		const String& handlerName="") :
			EventHandlerInstance<SOURCE_TYPE,ControlEvent>( source, handlerMethod, handlerName ) {

	}
};


};


#endif // _VCF_CONTROLEVENT_H__

/**
$Id$
*/
