#ifndef _VCF_COMMANDBUTTON_H__
#define _VCF_COMMANDBUTTON_H__
//CommandButton.h

/*
Copyright 2000-2004 The VCF Project.
Please see License.txt in the top level directory
where you installed the VCF.
*/


#if _MSC_VER > 1000
#   pragma once
#endif


/* Generated by Together */



namespace VCF{


class ButtonPeer;





#define COMMANDBUTTON_CLASSID		"8B2CDC30-3CAD-11d4-B553-00C04F0196DA"

/**
\class CommandButton CommandButton.h "vcf/ApplicationKit/CommandButton.h"
The CommandButton is a native push button that fires an event
when pressed, or "clicked".
@delegates
	@del CommandButton::ButtonClicked
*/
class APPLICATIONKIT_API CommandButton :  public VCF::Control, public VCF::Button {
public:

	CommandButton();

	virtual ~CommandButton();

	/**
	@delegate ButtonClicked this is fired when the button is clicked, either
	in response to events sent by the native windowing system, or in response
	to calling the click() method.
	@event ButtonEvent
	@see click()
	*/
	DELEGATE(ButtonDelegate,ButtonClicked);

	/**
	*This macro creates a method for adding a listener to the CommandButton's events
	*/
	virtual void addButtonClickHandler( EventHandler* handler ) {
		ButtonClicked += handler;
	}

	/**
	*This macro creates a method for removing a listener to the CommandButton's events
	*/
	virtual void removeButtonClickHandler( EventHandler* handler ) {
		ButtonClicked.remove(handler);
	}


    virtual void click();

	virtual void setDefault( const bool& defaultButton );

	virtual bool isDefault();

	virtual void setName( const String& name );
	/**
	*sets the caption for the button. The is the
	*text that is displayed on the button's face
	*/
    void setCaption( const String& caption );

    String getCaption();

	/**
	*The command type the button represents.
	*Certain command types will automatically send
	*the event to the dialog they belong to when
	*used on modal dialogs.
	*/
	ButtonCommandType getCommandType();

	/**
	*sets the
	*/
	void setCommandType( const ButtonCommandType& commandType );

	/**
	*
	*/
	virtual void paint(GraphicsContext * context);

	/**
	*
	*/
	void setIsPressed( const bool& pressed ) {
		isPressed_ = pressed;
	}

	/**
	*
	*/
	bool isPressed() {
		return isPressed_;
	}

	/**
	*
	*/
	virtual void mnemonicActivate();

	virtual double getPreferredHeight();

	virtual double getPreferredWidth();

	virtual bool generatePropertyValue( const String& fullPropertyName, Property* property, VariantData* value, String& strValue );
protected:
    bool isPressed_;
    ButtonPeer * buttonPeer_;
    String caption_;
	ButtonCommandType commandType_;

	void onFocusGained( FocusEvent* event );
	void onFocusLost( FocusEvent* event );


};

}


#endif // _VCF_COMMANDBUTTON_H__

/**
$Id$
*/
