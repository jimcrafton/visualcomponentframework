#ifndef _VCF_DEFAULTTREEITEM_H__
#define _VCF_DEFAULTTREEITEM_H__
//DefaultTreeItem.h

/*
Copyright 2000-2004 The VCF Project.
Please see License.txt in the top level directory
where you installed the VCF.
*/


#if _MSC_VER > 1000
#   pragma once
#endif


/* Generated by Together */


#ifndef _VCF_TREEITEM_H__
#	include "vcf/ApplicationKit/TreeItem.h"
#endif // _VCF_TREEITEM_H__


namespace VCF  {

class TreeModel;

#define DEFAULTTREEITEM_CLASSID		"3126B224-2819-11d4-B53A-00C04F0196DA"

/**
\class DefaultTreeItem DefaultTreeItem.h "vcf/ApplicationKit/DefaultTreeItem.h"
*/
class APPLICATIONKIT_API DefaultTreeItem : public TreeItem {
public:
	enum TreeEvents {
		teItemExpanded = ITEM_EVENT_CHANGED + 200
	};

	DefaultTreeItem( const String& caption, Control* owningControl, TreeModel* model );

	DefaultTreeItem( const String& caption );

	DefaultTreeItem();

	virtual ~DefaultTreeItem();

	virtual bool containsPoint( Point * pt );

	virtual uint32 getIndex();

	virtual void* getData();

	virtual void setData( void* data );

	virtual Color* getTextColor();

	virtual void setTextColor(Color* color);

	virtual void setTextBold(const bool& bold);

	virtual bool getTextBold();

	virtual bool isLeaf();

	virtual bool isRoot();

	virtual TreeItem* getParent();

	virtual void setParent( TreeItem* parent );

	/**
	* gets the next sibling item in the tree node, i.e. an item
	* with the same parent and at the same 'level' of this one.
	*@return TreeItem*, a pointer to the following TreeItem. It
	*returns NULL if this item is the first between the parent's children.
	*/
	virtual TreeItem* getNextChildNodeItem();

	/**
	* gets the previous sibling item in the tree node, i.e. an item
	* with the same parent and at the same 'level' of this one.
	*@return TreeItem*, a pointer to the previous TreeItem. It
	*returns NULL if this item is the first between the parent's children.
	*/
	virtual TreeItem* getPrevChildNodeItem();

	virtual String getCaption();

	virtual void setCaption( const String& caption );
	
	virtual uint32 getChildCount();

	virtual Enumerator<TreeItem*>* getChildren();

	void init();

	virtual void addChild( TreeItem* child );

	virtual void insertChild( const uint32& index, TreeItem* child );

	virtual void deleteChild( TreeItem* child );

	virtual void deleteChildAtIndex( const uint32& index );

	virtual void clearChildren();

	virtual void setIndex( const uint32& index );

	virtual void paint( GraphicsContext* context, Rect* paintRect );

	virtual bool isSelected();

	virtual void setSelected( const bool& selected );

	virtual void setModel( Model* model );

	virtual void setControl( Control* control );

	virtual bool isExpanded() {
		return isExpanded_;
	}

	virtual void expand( const bool& isExpanded );

	virtual void expandAllChildren( const bool& isExpanded );

	virtual uint32 getLevel();
	
	virtual void setImageIndex( const int32& imageIndex );	

	virtual int32 getSelectedImageIndex() {
		return selectedImageIndex_;
	}

	virtual void setSelectedImageIndex( const int32& selectedImageIndex );

	virtual int32 getExpandedImageIndex() {
		return expandedImageIndex_;
	}

	virtual void setExpandedImageIndex( const int32& expandedImageIndex );

	virtual bool canPaint() {
		return true;
	}
	
	virtual void setBounds( Rect* bounds );

	/**
	*not supported
	*/
	virtual int32 getStateImageIndex(){
		return stateImageIndex_;
	};

	virtual void setStateImageIndex( const int32& index );

	virtual void addSubItem( const String& caption, void* data );

	virtual void addSubItem( SubItem* subItem );

	virtual void removeSubItem( const uint32& index );

	virtual Enumerator<SubItem*>* getSubItems() {
		return enumSubItemsContainer_.getEnumerator();
	}

	virtual SubItem* getSubItem( const uint32& index );

	virtual uint32 getSubItemCount() {
		return subItems_.size();
	}

	virtual void subItemChanged( SubItem* item );

protected:
	virtual void changed( const uint32& eventType=ITEM_EVENT_CHANGED  );

protected:
	bool textBold_;
	Color TextColor_;
	String caption_;
	TreeItem* parent_;
	void* userData_;	
	uint32 index_;
	EnumeratorContainer<std::vector<TreeItem*>,TreeItem*> enumContainer_;
	std::vector<TreeItem*> childNodeItems_;

	EnumeratorContainer<std::vector<SubItem*>,SubItem*> enumSubItemsContainer_;
	std::vector<SubItem*> subItems_;

	bool selected_;
	bool isExpanded_;
	Rect bounds_;	
	int32 imageIndex_;
	int32 selectedImageIndex_;
	int32 expandedImageIndex_;
	int32 stateImageIndex_;
};


}; //namespace VCF


#endif // _VCF_DEFAULTTREEITEM_H__

/**
$Id$
*/
