#ifndef _VCF_KEYBOARDEVENT_H__
#define _VCF_KEYBOARDEVENT_H__
//KeyboardEvent.h

/*
Copyright 2000-2004 The VCF Project.
Please see License.txt in the top level directory
where you installed the VCF.
*/


#if _MSC_VER > 1000
#   pragma once
#endif


/* Generated by Together */




namespace VCF
{

/**
Keyboard masks
*/
enum KeyboardMasks{
	kmUndefined = 0,
	kmAlt = 1,
	kmShift = 2,
	kmCtrl = 4
};





/**
\class KeyboardEvent KeyboardEvent.h "vcf/ApplicationKit/KeyboardEvent.h"
*/
class APPLICATIONKIT_API KeyboardEvent : public Event {
public:

	KeyboardEvent( Object* source ) : Event(source),
		keyMask_(0), keyValue_(0), repeatCount_(0), virtualKeyCode_((VirtualKeyCode)0)  {

	}

	KeyboardEvent( Object* source, const unsigned long& eventType,
		           const unsigned long& repeatCount, const unsigned long& keyMask,
				   const VCFChar& keyValue,
				   const VirtualKeyCode& virtKeyValue ): Event(source,eventType),
		keyMask_(keyMask), keyValue_(keyValue), repeatCount_(repeatCount),
		virtualKeyCode_(virtKeyValue) {}

	KeyboardEvent( const KeyboardEvent& rhs ):Event(rhs) {
		*this = rhs;
	}

	virtual ~KeyboardEvent(){};


	KeyboardEvent& operator= ( const KeyboardEvent& rhs ) {
		Event::operator =( rhs );
		keyMask_ = rhs.keyMask_;
		keyValue_ = rhs.keyValue_;
		repeatCount_ = rhs.repeatCount_;
		virtualKeyCode_ = rhs.virtualKeyCode_;
		
		return *this;
	}
	
    unsigned long getKeyMask() {
		return keyMask_;
	}
	
	VCFChar getKeyValue() {
		return keyValue_;
	}
	
	unsigned long getRepeatCount() {
		return repeatCount_;
	}
	
	bool hasShiftKey() {
		return ( kmShift & keyMask_ ) != 0;
	}
	
	bool hasAltKey() {
		return ( kmAlt & keyMask_ ) != 0;
	}
	
	bool hasControlKey() {
		return ( kmCtrl & keyMask_ ) != 0;
	}
	
	VirtualKeyCode getVirtualCode() {
		return virtualKeyCode_;
	}
	
	virtual Object* clone( bool deep=false ) {
		return new KeyboardEvent(*this);
	}
private:
    unsigned long keyMask_;
	VCFChar keyValue_;
	unsigned long repeatCount_;
	VirtualKeyCode virtualKeyCode_;
};


/**
\class KeyboardEventHandler KeyboardEvent.h "vcf/ApplicationKit/KeyboardEvent.h"
*KeyboardEventHandler
*handles the following:
*onKeyPressed
*onKeyDown
*onKeyUp
*/
template <class SOURCE_TYPE>
class KeyboardEventHandler : public EventHandlerInstance<SOURCE_TYPE,KeyboardEvent> {
public:
	KeyboardEventHandler( SOURCE_TYPE* source,
		_typename_ EventHandlerInstance<SOURCE_TYPE,KeyboardEvent>::OnEventHandlerMethod handlerMethod,
		const String& handlerName="") :
			EventHandlerInstance<SOURCE_TYPE,KeyboardEvent>( source, handlerMethod, handlerName ) {

	}
};



};


#endif // _VCF_KEYBOARDEVENT_H__

/**
$Id$
*/
