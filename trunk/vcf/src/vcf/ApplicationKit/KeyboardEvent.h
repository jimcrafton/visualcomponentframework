#ifndef _VCF_KEYBOARDEVENT_H__
#define _VCF_KEYBOARDEVENT_H__
//KeyboardEvent.h

/*
Copyright 2000-2004 The VCF Project.
Please see License.txt in the top level directory
where you installed the VCF.
*/


#if _MSC_VER > 1000
#   pragma once
#endif


/* Generated by Together */




namespace VCF
{






/**
\class KeyboardEvent KeyboardEvent.h "vcf/ApplicationKit/KeyboardEvent.h"
*/
class APPLICATIONKIT_API KeyboardEvent : public Event {
public:

	KeyboardEvent( Object* source ) : Event(source),
		keyMask(0), keyValue(0), repeatCount(0), virtualKeyCode((VirtualKeyCode)0),ignoreKeystroke(false),dontProcessKeystroke(false)  {

	}

	KeyboardEvent( Object* source, const uint32& eventType,
		           const uint32& repCnt, const uint32& km,
				   const VCFChar& kv,
				   const VirtualKeyCode& vk ): Event(source,eventType),
		keyMask(km), keyValue(kv), repeatCount(repCnt),
		virtualKeyCode(vk),ignoreKeystroke(false),dontProcessKeystroke(false) {}

	KeyboardEvent( const KeyboardEvent& rhs ):Event(rhs) {
		*this = rhs;
	}

	virtual ~KeyboardEvent(){};


	KeyboardEvent& operator= ( const KeyboardEvent& rhs ) {
		Event::operator =( rhs );
		keyMask = rhs.keyMask;
		keyValue = rhs.keyValue;
		repeatCount = rhs.repeatCount;
		virtualKeyCode = rhs.virtualKeyCode;
		ignoreKeystroke = rhs.ignoreKeystroke;
		dontProcessKeystroke = rhs.dontProcessKeystroke;
		
		return *this;
	}
	
	bool hasShiftKey() {
		return ( kmShift & keyMask ) != 0;
	}
	
	bool hasAltKey() {
		return ( kmAlt & keyMask ) != 0;
	}
	
	bool hasControlKey() {
		return ( kmCtrl & keyMask ) != 0;
	}
	
	
	
	virtual Object* clone( bool deep=false ) {
		return new KeyboardEvent(*this);
	}

    uint32 keyMask;
	VCFChar keyValue;
	uint32 repeatCount;
	VirtualKeyCode virtualKeyCode;
	bool ignoreKeystroke;
	bool dontProcessKeystroke;
};


/**
*KeyboardDelegate
*handles the following:
\li onKeyPressed
\li onKeyDown
\li onKeyUp
*/
typedef Delegate1<KeyboardEvent*> KeyboardDelegate; 
typedef KeyboardDelegate::ProcedureType KeyboardHandler;

};


#endif // _VCF_KEYBOARDEVENT_H__

/**
$Id$
*/
