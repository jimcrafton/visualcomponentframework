#ifndef _VCF_CUSTOMCONTROL_H__
#define _VCF_CUSTOMCONTROL_H__
//CustomControl.h

/*
Copyright 2000-2004 The VCF Project.
Please see License.txt in the top level directory
where you installed the VCF.
*/


#if _MSC_VER > 1000
#   pragma once
#endif


/* Generated by Together */



namespace VCF{



#define CUSTOMCONTROL_CLASSID			"ED88C0A4-26AB-11d4-B539-00C04F0196DA"

/**
\class CustomControl CustomControl.h "vcf/ApplicationKit/CustomControl.h"
This is the base class for custom controls that are 
not based on existing native controls. For example
if you were going to make a clock control, you'd 
probably start with deriving a new class from 
this one and overriding the paint() to 
draw your clock.
*/
class APPLICATIONKIT_API CustomControl : public Control {
public:

	CustomControl();
	virtual ~CustomControl();

	CustomControl( const bool& useHeavyweightPeer );

	virtual void paint(GraphicsContext * context);

	void init();

	virtual bool isLightWeight();

	/**
	*does this control allow the background of it's parent to show through ?
	*Currently only applicable to lightweight controls
	*/
	bool isTransparent();
	/**
	*sets whether or not the controls paints a background and covers it's parent
	*/
	void setTransparent( const bool& transparent );

	/**
	* sets if we want to use the control's color to draw the control's background;
	* otherwise the theme background is drawn.
	*@param const bool&, true if we use the control's color, false if 
	* we draw the theme background.
	*/
	void setUseColorForBackground( const bool& val ) {
		useColorForBackground_ = val;
		repaint();
	}
	
	/**
	* gets if we use the control's color to draw the control's background
	*@return bool, true if we use the control's color, false if it uses the theme background.
	*/
	bool getUseColorForBackground() {
		return useColorForBackground_;
	}

protected:
	bool isLightweight_;
	bool isTransparent_;
	bool useColorForBackground_;

};

};


#endif // _VCF_CUSTOMCONTROL_H__

/**
$Id$
*/
