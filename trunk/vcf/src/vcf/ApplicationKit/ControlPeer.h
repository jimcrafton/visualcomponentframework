#ifndef _VCF_CONTROLPEER_H__
#define _VCF_CONTROLPEER_H__
//ControlPeer.h

/*
Copyright 2000-2004 The VCF Project.
Please see License.txt in the top level directory
where you installed the VCF.
*/


#if _MSC_VER > 1000
#   pragma once
#endif


namespace VCF{

class Control;

class Font;

class Rect;

class Cursor;

class Border;

class GraphicsContext;

/** 
\class ControlPeer ControlPeer.h "vcf/ApplicationKit/ControlPeer.h"
The base Peer interface. In the Visual Control Framework Peers are the equivalent 
of Peers in Java. Peers can be either light weight or heavyweight. Heavyweight 
Peers are based on native widgets are consume a certain amount of resources. On 
Win32 heavweight Peers have their own window handle and graphics context. Lightweight 
Peers use the window handle and graphics context of the parents.  Frame Peers, 
such as WindowPeer and DialogPeer \em must be based on heavyweight controls.

*/

class APPLICATIONKIT_API ControlPeer : public VCF::Interface {
public:

	virtual ~ControlPeer(){};

	/**
	This is called to actually create any neccessary windowing system resources specific
	to a new control (or widget/window/etc) instance for the platform.
	create() <b>must</b> be called by the containing VCF::Control subclass, typically in the
	classes constructor, after retreiving the new peer instance from the appropriate
	UIToolkit::createXXX() call.
	*/
	virtual void create( Control* owningControl ) = 0;

	/**
	Destroy the control peer's resoruces (if neccessary)
	*/
	virtual void destroyControl() = 0;

	/**
	returns a ID that identifies this control. On Win32 this corresponds to an HWND.
	*/
	virtual OSHandleID getHandleID() = 0;

	/**
	returns a text associated with the component. This usually gets used in the
	Control::getCaption() method.
	*/
	virtual String getText() = 0;

	/**
	sets the text for the control
	*/
	virtual void setText( const String& text ) = 0;

	/**
	sets the bounds for the component. Bounds are specified in the coordinate system of the componenents parent.
	*/
	virtual void setBounds( Rect* rect ) = 0;

	/**
	advanced function for changing the size of multiple child windows.
	This may have no implementation on some windowing systems
	*/
	virtual bool beginSetBounds( const uint32& numberOfChildren ) = 0;

	virtual void endSetBounds() = 0;

	/**
	returns the bounds of the component in the coordinate system of the parent.
	*/
	virtual Rect getBounds() = 0;

	/**
	shows or hides the component.
	This does NOT close the component (if invoked on a frame based component ).
	*/
	virtual void setVisible( const bool& visible ) = 0;

	/**
	returns wether or not the component is currently visible.
	*/
	virtual bool getVisible() = 0;

	/**
	* returns the component that this Peer is attached to.
	*/
	virtual Control* getControl() = 0;

	/**
	* attahces the Peer to a particular component. This should only be done once.
	*/
	virtual void setControl( Control* component ) = 0;

	virtual void setCursor( Cursor* cursor ) = 0;

	virtual void setParent( Control* parent ) = 0;

	virtual Control* getParent() = 0;

	virtual bool isFocused() = 0;

	virtual void setFocused() = 0;

	virtual bool isEnabled() = 0;

	virtual void setEnabled( const bool& enabled ) = 0;

	virtual void setFont( Font* font ) = 0;

	virtual void repaint( Rect* repaintRect, const bool& immediately ) = 0;

	/**
	*this keeps the mouse events being sent to this control, even is the
	*mouse leaves the physical bounds of the control
	*/
	virtual void keepMouseEvents() = 0;

	/**
	*releases mouse events - goes back to normal event handling
	*/
	virtual void releaseMouseEvents() = 0;

	/**
	Takes the coordinates in pt, which are in the coordinate system of
	this control, and translates them into the coordinate system of the
	Screen.
	@param Point the initial point value, in the coordinate system of the
	control this method is called on.
	*/
	virtual void translateToScreenCoords( Point* pt ) = 0;

	/**
	Takes the coordinates in pt, which are in the coordinate system of
	the Screen, and translates them into the coordinate system of this
	control.
	@param Point the initial point value, in the coordinate system of the
	Screen.
	*/
	virtual void translateFromScreenCoords( Point* pt ) = 0;

	/**
	Called by the control when it's border object changes. May or may not
	need to be implemented depending on the windowing system.
	*/
	virtual void setBorder( Border* border ) = 0;
	
	/**
	Called by the container instance of the child's parent control during it's
	paintChildren() function. The implementation should do whatever is neccessary
	to seup up the child control's cliprect. A pre-calculated cliprect is passed
	in that was generated by the paintChildren() function. 
	
	This function is called \em prior the child control's paint() or paintBorder()
	functions.
	*/
	virtual void preChildPaint( GraphicsContext* graphicsContext, Control* child, Rect* childClipRect ) = 0;
	
	/**
	Called by the container instance of the child's parent control during it's
	paintChildren() function. Called after the child control's paint() and paintBorder()
	functions.
	*/
	virtual void postChildPaint( GraphicsContext* graphicsContext, Control* child, Rect* oldClipRect ) = 0;
								
};


}; // namespace VCF


#endif // _VCF_CONTROLPEER_H__

/**
$Id$
*/
