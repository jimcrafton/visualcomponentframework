#ifndef _VCF_CLIPBOARD_H__
#define _VCF_CLIPBOARD_H__
//Clipboard.h

/*
Copyright 2000-2004 The VCF Project.
Please see License.txt in the top level directory
where you installed the VCF.
*/


#if _MSC_VER > 1000
#   pragma once
#endif


/* Generated by Together */






namespace VCF{


class DataObject;
class ClipboardPeer;



/**
\class Clipboard Clipboard.h "vcf/ApplicationKit/Clipboard.h"
The Clipboard represents a common place to put shared
data between objects and/or between applications.
The Clipboard maintains one or more ClipboardDataObjects
that actually hold the data, according to their DataType.

The clipboard is never created directly - this is taken care of
by the UIToolkit. To access the clipboard you call the
UIToolkit::getSystemClipboard() method which will return a
reference to the Clipboard singleton.

In Win32 the Clipboard is implemented with full support for
COM's IDataObject for actual data transfer, so objects
that put data into the Clipboard in the VCF can easily share
the data with other Win32 programs.
*
@see DataObject
@see DataType
@see ClipboardPeer
@see UIToolkit::getSystemClipboard()
@delegates
	@del Clipboard::ClipboardContentsChanged
	@del Clipboard::ClipboardItemCopied
	@del Clipboard::ClipboardItemPasted
*/
class APPLICATIONKIT_API Clipboard : public Object{
public:

	Clipboard();

	virtual ~Clipboard();

	/**

	@delegate ClipboardContentsChanged is fired when the clipboard contents change
	@event ClipboardEvent
	*/
	DELEGATE(ClipboardDelegate,ClipboardContentsChanged)

	/**
	@delegate ClipboardItemCopied
	@event ClipboardEvent
	@eventtype
	*/
	DELEGATE(ClipboardDelegate,ClipboardItemCopied)

	/**
	@delegate ClipboardItemPasted
	@event ClipboardEvent
	@eventtype
	*/
	DELEGATE(ClipboardDelegate,ClipboardItemPasted)

	/**
	does the Clipboard have a DataObject that
	matches the requested dataType
	@param String the datatype to look for
	@return bool return true if the Clipboard has the kind of
	data specified in dataType, otherwise returns false
	*/
	bool hasDataType( const String& dataType );

	/**
	copies the specified dataObject into the clipboard.
	The Clipboard takes ownership of the dataObject object
	passed in which must be created on the heap.
	@param DataObject the data object to place in the
	Clipboard
	
	For example:
	\code
		Clipboard* clipboard = UIToolkit::getDefaultUIToolkit()->getSystemClipboard();

		String selectedText = "Hello World - here's some clipboard text";
		DataObject* textDataObj = new TextDataObject( selectedText );
		clipboard->copyTo( textDataObj );

	\endcode
	@see DataObject
	*/
	void copyTo( DataObject* dataObject );

	/**
	pastes the data, specified in dataType, from the Clipboard
	and returns it.
	@param DataType the type of data to paste from the clipboard
	@see DataType
	@return DataObject* the new data from the clipboard or NULL
	if no data object exists for the specified data type.
	*/
	DataObject* pasteFrom( const String& dataType );

	/**
	internal VCF use only
	*/
	void internal_deleteDataObject( DataObject* dataObject );

private:
	ClipboardPeer * clipboardPeer_;
};

}


#endif // _VCF_CLIPBOARD_H__

/**
$Id$
*/
