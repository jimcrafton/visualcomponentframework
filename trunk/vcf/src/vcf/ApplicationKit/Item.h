#ifndef _VCF_ITEM_H__
#define _VCF_ITEM_H__
//Item.h

/*
Copyright 2000-2004 The VCF Project.
Please see License.txt in the top level directory
where you installed the VCF.
*/


#if _MSC_VER > 1000
#   pragma once
#endif


/* Generated by Together */



namespace VCF{



class ItemListener;

class Image;

class Model;

class ItemEvent;

class Rect;

class Point;

class GraphicsContext;

class Control;

class Item;

class ItemSort {
public:
	virtual bool compare( const Item* x, const Item* y) = 0;
};


#define ITEM_CLASSID		"ED88C0AA-26AB-11d4-B539-00C04F0196DA"

/**
*Item
*/
class APPLICATIONKIT_API Item : public Component {
public:
	/**
	*these are a general set of enumeration masks that can be used
	*to descirbe the items state above and beyond whether the item
	*is selected
	*/
	enum ItemDisplayState{
		idsNone =			0x0000,
		idsChecked =		0x0005,
		idsUnChecked =		0x0006,
		idsRadioUnpressed = 0x0007,
		idsRadioPressed =	0x0008
	};


	Item(){

	};

	virtual ~Item(){};

	virtual void addItemPaintHandler( EventHandler* handler ) = 0;

	virtual void addItemChangedHandler( EventHandler* handler ) = 0;

	virtual void addItemSelectedHandler( EventHandler* handler ) = 0;

	virtual void addItemAddedHandler( EventHandler* handler ) = 0;

	virtual void addItemDeletedHandler( EventHandler* handler ) = 0;

	virtual void removeItemPaintHandler( EventHandler* handler ) = 0;

	virtual void removeItemChangedHandler( EventHandler* handler ) = 0;

	virtual void removeItemSelectedHandler( EventHandler* handler ) = 0;

	virtual void removeItemAddedHandler( EventHandler* handler ) = 0;

	virtual void removeItemDeletedHandler( EventHandler* handler ) = 0;

    virtual bool containsPoint( Point * pt ) = 0;

	/**
	*returns the Bounds for the Item or NULL if not
	*applicable
	*/
	virtual Rect* getBounds() = 0;

	virtual void setBounds( Rect* bounds ) = 0;

	/**
	*represents the current state of the item
	*as a long that is entirely item specific as well
	*as specific to the control that is hosting the item(s).
	*some controls will completely ignore this value
	*/
	virtual long getState() = 0;

	virtual void setState( const long& state ) = 0;

	/**
	*This image index represents the state of an particular item
	*separate from wether or not it is selected or not. typically it
	*is offset horizontally from the regular image that getImageIndex()
	*represents. This image is frequently used to represent check marks
	*for things like tree or list controls
	*/
	virtual long getStateImageIndex() = 0;

	virtual void setStateImageIndex( const long& index ) = 0;

    virtual ulong32 getIndex() = 0;

	virtual long getImageIndex() = 0;

	virtual void setImageIndex( const long& imageIndex ) = 0;

	virtual void setIndex( const unsigned long& index ) = 0;

    virtual void* getData() = 0;

	virtual void setData( void* data ) = 0;

	virtual Model* getModel() = 0;

	virtual void setModel( Model* model ) = 0;

	/**
	*indicates whether the item can paint itself.
	*In general this is often false, but when true,
	*the control that contains the item should
	*call the item's paint() method whenever the item
	*needs repainting.
	*/
	virtual bool canPaint() = 0;

	virtual void paint( GraphicsContext* context, Rect* paintRect ) = 0;

	virtual bool isSelected() = 0;

	virtual void setSelected( const bool& selected ) = 0;

	/**
	*all items may have a control that "owns" them.
	*so in a ListControl, the ListItem::getControl() would
	*return the ListControl that contained the model that
	*held the ListItem's
	*/
	virtual Control* getControl() = 0;

	virtual void setControl( Control* control ) = 0;	
};

};


/**
*CVS Log info
*$Log$
*Revision 1.4  2005/07/09 23:14:53  ddiego
*merging in changes from devmain-0-6-7 branch.
*
*Revision 1.3.2.1  2005/06/06 02:34:06  ddiego
*menu changes to better support win32 and osx.
*
*Revision 1.3  2004/12/01 04:31:21  ddiego
*merged over devmain-0-6-6 code. Marcello did a kick ass job
*of fixing a nasty bug (1074768VCF application slows down modal dialogs.)
*that he found. Many, many thanks for this Marcello.
*
*Revision 1.2.2.1  2004/09/07 00:49:12  ddiego
*minor fixes in printg code in graphics kit, and added a 2 ways to print in the printing example.
*
*Revision 1.2  2004/08/07 02:49:08  ddiego
*merged in the devmain-0-6-5 branch to stable
*
*Revision 1.1.2.3  2004/06/06 07:05:30  marcelloptr
*changed macros, text reformatting, copyright sections
*
*Revision 1.1.2.2  2004/04/29 03:43:14  marcelloptr
*reformatting of source files: macros and csvlog and copyright sections
*
*Revision 1.1.2.1  2004/04/28 00:28:17  ddiego
*migration towards new directory structure
*
*Revision 1.20.4.1  2004/04/26 21:58:20  marcelloptr
*changes for dir reorganization: _VCF_MACRO_H__
*
*Revision 1.20  2003/12/18 05:15:57  ddiego
*merge from devmain-0-6-2 branch into the stable branch
*
*Revision 1.19.2.3  2003/12/02 05:50:05  ddiego
*added preliminary support for teh Action class. This will make it easier
*to hook up complimentary UI elements (such as a "copy" menu item, and a
*"copy" toolbar item) and have tehm respond to update and actions via a
*single source.
*Got rid of the old toolbar button and separator class. Merged in Marcellos
*new fixes for the Container and Splitter classes.
*Some misc fixes to the Toolbar, groups and checks now work correctly.
*
*Revision 1.19.2.2  2003/09/21 04:15:34  ddiego
*moved the cvs info data to teh bottom of the header instead of the
*top so it is easier to get to the actual header class declarations
*instead of having to wade through all the cvs info stuff.
*
*Revision 1.19.2.1  2003/09/12 00:09:32  ddiego
*added better tabbing behaviour - fixed an earlier bug.
*Code is easier to understand and it simplified the implementation
*a bit as well
*Moved around the RTTI definitions for various Appkit classes to a
*single inline and stripped them from the various class headers
*
*Revision 1.19  2003/08/09 02:56:42  ddiego
*merge over from the devmain-0-6-1 branch
*Changes
*Features:
*-Added additional implementation to better support the MVC architecture in
*the VCF
*
*-Added a Document/View architecure that is similar to MFC's or NextSteps's
*Doc/View architectures
*
*-Integrated the Anti Grain Graphics library into the GraphicsKit. There is
*now basic support for it in terms of drawing vector shapes
*(fills and strokes). Image support will come in the next release
*
*-Added several documented graphics tutorials
*
*Bugfixes:
*
*[ 775744 ] wrong buttons on a dialog
*[ 585239 ] Painting weirdness in a modal dialog ?
*[ 585238 ] Modal dialog which makes a modal Dialog
*[ 509004 ] Opening a modal Dialog causes flicker
*[ 524878 ] onDropped not called for MLTcontrol
*
*Plus an issue with some focus and getting the right popup window to activate
*has also been fixed
*
*Revision 1.18.2.1  2003/06/30 02:53:15  ddiego
*Allow getting the selected filter from a CommonFileDialog
*Added a quitCurrentEventLoop to the UIToolkit to allow programatic
*termination of a program if there is no main window specified
*added a getTag method to the Item class
*
*Revision 1.18  2003/05/17 20:37:03  ddiego
*this is the checkin for the 0.6.1 release - represents the merge over from
*the devmain-0-6-0 branch plus a few minor bug fixes
*
*Revision 1.17.2.1  2003/03/23 03:23:45  marcelloptr
*3 empty lines at the end of the files
*
*Revision 1.17  2003/02/26 04:30:38  ddiego
*merge of code in the devmain-0-5-9 branch into the current tree.
*most additions are in the area of the current linux port, but the major
*addition to this release is the addition of a Condition class (currently
*still under development) and the change over to using the Delegate class
*exclusively from the older event handler macros.
*
*Revision 1.16.20.1  2002/12/25 22:38:00  ddiego
*more stupid fixes to get rid of the damn gcc no newline warning...grrr...
*
*Revision 1.16  2002/01/24 01:46:47  ddiego
*added a cvs "log" comment to the top of all files in vcf/src and vcf/include
*to facilitate change tracking
*
*/


#endif // _VCF_ITEM_H__


