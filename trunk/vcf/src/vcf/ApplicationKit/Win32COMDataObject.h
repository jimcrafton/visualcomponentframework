#ifndef _VCF_COMDATAOBJECT_H__
#define _VCF_COMDATAOBJECT_H__
//COMDataObject.h

/*
Copyright 2000-2004 The VCF Project.
Please see License.txt in the top level directory
where you installed the VCF.
*/


#if _MSC_VER > 1000
#   pragma once
#endif


/* Generated by Together */



#ifndef _VCF_ENUMOBJECT_H__
#include "vcf/ApplicationKit/EnumObject.h"
#endif // _VCF_ENUMOBJECT_H__




namespace VCFCOM{
/**
 * base implementation of IDataObject
 */

class DataRendering : public VCF::Object{
public:
	DataRendering();

	DataRendering( FORMATETC * formatETC, STGMEDIUM * stgMedium, IUnknown* newStorageOwner );
	virtual ~DataRendering();

	DataRendering( const DataRendering& rhs ) {
		*this = rhs;
	}

	FORMATETC       formatETC_;
    STGMEDIUM       storage_;
    IUnknown*       owner_;

	bool isEmpty() {
		return formatETC_.cfFormat == 0 &&
				formatETC_.dwAspect == 0 &&
				formatETC_.tymed == 0 &&
				storage_.tymed == 0 &&
				storage_.hGlobal == 0 &&
				owner_ == NULL;


	}
	virtual VCF::String toString();

	DataRendering& operator= (const DataRendering& rhs ) {
		memcpy( &formatETC_, &rhs.formatETC_, sizeof(formatETC_) );
		memcpy( &storage_, &rhs.storage_, sizeof(storage_) );
		owner_ = rhs.owner_;

		return *this;
	}

	bool operator == ( const DataRendering& dataRenderToCompare )const
	{
		bool result = false;

		result = ( (formatETC_.cfFormat == dataRenderToCompare.formatETC_.cfFormat) &&
		           (formatETC_.dwAspect == dataRenderToCompare.formatETC_.dwAspect) &&
				   (formatETC_.tymed == dataRenderToCompare.formatETC_.tymed) );

		return result;
	};

	bool operator == ( const FORMATETC& formatETCToCompare )const
	{
		bool result = false;

		result = ( (formatETC_.cfFormat == formatETCToCompare.cfFormat) &&
		           (formatETC_.dwAspect == formatETCToCompare.dwAspect) &&
				   (formatETC_.tymed == formatETCToCompare.tymed) );

		return result;
	};
};


/**
*This class implements IDataObject directly but also uses a member variable
*taht can point to a reference to some already existing IDataObject instance
*/
class COMDataObject : public IDataObject {
public:

   	COMDataObject( IDataObject* outerDataObject=NULL );

	virtual ~COMDataObject();

	virtual HRESULT STDMETHODCALLTYPE QueryInterface(REFIID iid, void** ppvObj) {
		if ( iid == IID_IUnknown ) {
			*ppvObj = (IUnknown*)(this);
			((IUnknown*)(*ppvObj))->AddRef();
			return S_OK;
		}
		else if ( iid == IID_IDataObject ) {
			*ppvObj = (IDataObject*)(this);
			((IUnknown*)(*ppvObj))->AddRef();
			return S_OK;
		}
		return E_NOINTERFACE;
	}

	virtual ULONG STDMETHODCALLTYPE AddRef(void) {
		ref_ ++;
		return ref_;
	}

    virtual ULONG STDMETHODCALLTYPE Release(void) {
		if ( ref_ > 0 ) {
			ref_ --;
		}
		if ( 0 == ref_ ) {
			delete this;
			return 0;
		}

		return ref_;
	}


	STDMETHOD(GetData)( FORMATETC * formatETC, STGMEDIUM * stgMedium );

	STDMETHOD(GetDataHere)( FORMATETC * formatETC, STGMEDIUM * stgMedium );

	STDMETHOD(QueryGetData)( FORMATETC * formatETC );

	STDMETHOD(GetCanonicalFormatEtc)( FORMATETC * formatETCIn, FORMATETC * formatETCOut );

	STDMETHOD(SetData)( FORMATETC * formatETC, STGMEDIUM * stgMedium, BOOL releaseData );

	STDMETHOD(EnumFormatEtc)( DWORD dwDirection, IEnumFORMATETC ** ppenumFormatetc );

	STDMETHOD(DAdvise)( FORMATETC * formatETC, DWORD advf, IAdviseSink * pAdvSink,  DWORD * pdwConnection );

	STDMETHOD(DUnadvise)( DWORD dwConnection );

	STDMETHOD(EnumDAdvise)( IEnumSTATDATA ** ppenumAdvise );



	/**
     * Adds a new data type that the dataobject supports.
     */
	void setDataObject( VCF::DataObject* data );

	VCF::DataObject* getDataObject() {
		return dataObj_;
	}

    /**
     * is the data type passed in supported by the data object ?
     */
    virtual bool isTypeSupported(const VCF::String& dataType );

private:
	DataRendering findDataRenderingForType( FORMATETC* formatETC );

	UINT translateFrameworkFormat( const VCF::String& dataType );
	FORMATETC translateFrameworkFormatToFormatETC( const VCF::String& dataType );
	VCF::String translateClipboardFmt( const UINT& fmtType );

	std::vector<DataRendering> renderings_;
	VCF::DataObject* dataObj_;

	IDataObject* outerDataObject_;
	ULONG ref_;
};




class EnumFormatETC : public IEnumFORMATETC, public EnumObject<FORMATETC> {
public:

	EnumFormatETC():
		EnumObject<FORMATETC>(){};

	EnumFormatETC( const EnumFormatETC& enumObj ):
		EnumObject<FORMATETC>( enumObj ){};

	virtual ~EnumFormatETC(){};


	virtual HRESULT STDMETHODCALLTYPE QueryInterface(REFIID iid, void** ppvObj) {
		if ( iid == IID_IUnknown ) {
			*ppvObj = (IUnknown*)(this);
			((IUnknown*)(*ppvObj))->AddRef();
			return S_OK;
		}
		else if ( iid == IID_IEnumFORMATETC ) {
			*ppvObj = (IEnumFORMATETC*)(this);
			((IUnknown*)(*ppvObj))->AddRef();
			return S_OK;
		}
		return E_NOINTERFACE;
	}

	virtual ULONG STDMETHODCALLTYPE AddRef(void) {
		ref_ ++;
		return ref_;
	}

    virtual ULONG STDMETHODCALLTYPE Release(void) {
		if ( ref_ > 0 ) {
			ref_ --;
		}
		if ( 0 == ref_ ) {
			delete this;
			return 0;
		}

		return ref_;
	}


	STDMETHOD(Next)( ULONG elementsRequested, FORMATETC *elementList, ULONG *elementsFetched ){
		return EnumObject<FORMATETC>::_Next( elementsRequested, elementList, elementsFetched );
	};

	STDMETHOD(Skip)( ULONG elementsToSkip ){
		return EnumObject<FORMATETC>::_Skip( elementsToSkip );
	};

	STDMETHOD(Reset)(void){
		return EnumObject<FORMATETC>::_Reset();
	};

	/**
	Creates another enumerator that contains the same enumeration state as the
	current one. Using this function, a client can record a particular point in
	the enumeration sequence, and then return to that point at a later time.
	The new enumerator supports the same interface as the original one.
	*/
	STDMETHOD(Clone)( IEnumFORMATETC** enumFmtEtc ){
		EnumObject<FORMATETC>* enumFmt = NULL;

		enumFmt = new EnumFormatETC( *this );
		*enumFmtEtc = (IEnumFORMATETC*)enumFmt;

		return NOERROR;//result;//E_NOTIMPL;
	};

protected:
	ULONG ref_;

};


};


/**
*CVS Log info
*$Log$
*Revision 1.2  2006/04/07 02:35:26  ddiego
*initial checkin of merge from 0.6.9 dev branch.
*
*Revision 1.1.2.1  2006/02/19 19:38:12  ddiego
*adjusted some comet code to make it compile again. renamed some of the COM utility files to have a Win32 prefix.
*
*Revision 1.2  2004/08/07 02:49:05  ddiego
*merged in the devmain-0-6-5 branch to stable
*
*Revision 1.1.2.2  2004/04/29 03:43:12  marcelloptr
*reformatting of source files: macros and csvlog and copyright sections
*
*Revision 1.1.2.1  2004/04/28 00:28:14  ddiego
*migration towards new directory structure
*
*Revision 1.3.4.1  2004/04/26 21:58:42  marcelloptr
*changes for dir reorganization: _VCF_MACRO_H__
*
*Revision 1.3  2003/12/18 05:15:58  ddiego
*merge from devmain-0-6-2 branch into the stable branch
*
*Revision 1.2.2.2  2003/09/12 00:09:33  ddiego
*added better tabbing behaviour - fixed an earlier bug.
*Code is easier to understand and it simplified the implementation
*a bit as well
*Moved around the RTTI definitions for various Appkit classes to a
*single inline and stripped them from the various class headers
*
*Revision 1.2.2.1  2003/08/27 20:11:49  ddiego
*adjustments to how hte DataObject class work and copy/paste
*
*Revision 1.2  2003/08/09 02:56:44  ddiego
*merge over from the devmain-0-6-1 branch
*Changes
*Features:
*-Added additional implementation to better support the MVC architecture in
*the VCF
*
*-Added a Document/View architecure that is similar to MFC's or NextSteps's
*Doc/View architectures
*
*-Integrated the Anti Grain Graphics library into the GraphicsKit. There is
*now basic support for it in terms of drawing vector shapes
*(fills and strokes). Image support will come in the next release
*
*-Added several documented graphics tutorials
*
*Bugfixes:
*
*[ 775744 ] wrong buttons on a dialog
*[ 585239 ] Painting weirdness in a modal dialog ?
*[ 585238 ] Modal dialog which makes a modal Dialog
*[ 509004 ] Opening a modal Dialog causes flicker
*[ 524878 ] onDropped not called for MLTcontrol
*
*Plus an issue with some focus and getting the right popup window to activate
*has also been fixed
*
*Revision 1.1.2.2  2003/06/27 03:10:58  ddiego
*got rid of some redundant junk in the Clipboard and DataObject
*classes. Instead of a rather dippy use of the DataType calss, we now simply
*use pure mime-types to identify the various "flavours" of data.
*
*Revision 1.1.2.1  2003/05/25 19:07:11  ddiego
*fixed bug [ 524878 ] onDropped not called for MLTcontrol. This
*was due to errors in the drag-drop implementation for WIn32 and is
*now fixed.
*Also cleaned up the drag-drop implementation and moved/deleted a number of
*irrelevant files for COM support. The vcf/include/com and vcf/src/COM
*directories are now gotten rid of.
*
*Revision 1.8  2003/05/17 20:36:59  ddiego
*this is the checkin for the 0.6.1 release - represents the merge over from
*the devmain-0-6-0 branch plus a few minor bug fixes
*
*Revision 1.7.2.2  2003/03/23 03:23:43  marcelloptr
*3 empty lines at the end of the files
*
*Revision 1.7.2.1  2003/03/12 03:09:08  ddiego
*switched all member variable that used the "m_"<name> prefix to
* <name>"_" suffix nameing standard.
*Also changed all vcf builder files to accomadate this.
*Changes were made to the Stream classes to NOT multiple inheritance and to
*be a little more correct. Changes include breaking the FileStream into two
*distinct classes, one for input and one for output.
*
*Revision 1.7  2003/02/26 04:30:35  ddiego
*merge of code in the devmain-0-5-9 branch into the current tree.
*most additions are in the area of the current linux port, but the major
*addition to this release is the addition of a Condition class (currently
*still under development) and the change over to using the Delegate class
*exclusively from the older event handler macros.
*
*Revision 1.6.14.1  2003/01/08 00:19:41  marcelloptr
*mispellings and newlines at the end of all source files
*
*Revision 1.6  2002/05/09 03:10:42  ddiego
*merged over code from development branch devmain-0-5-1a into the main CVS trunk
*
*Revision 1.5.4.1  2002/04/27 15:52:15  ddiego
*Changed a bunch of files include and made it a bit faster and added better include
*guards in the common headers
*
*Revision 1.5  2002/01/24 01:46:45  ddiego
*added a cvs "log" comment to the top of all files in vcf/src and vcf/include
*to facilitate change tracking
*
*/


#endif // _VCF_COMDATAOBJECT_H__


