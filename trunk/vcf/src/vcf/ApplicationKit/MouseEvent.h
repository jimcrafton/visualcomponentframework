#ifndef _VCF_MOUSEEVENT_H__
#define _VCF_MOUSEEVENT_H__
//MouseEvent.h

/*
Copyright 2000-2004 The VCF Project.
Please see License.txt in the top level directory
where you installed the VCF.
*/


#if _MSC_VER > 1000
#   pragma once
#endif


/* Generated by Together */




namespace VCF{




/**
Mouse button masks
*/
enum MouseButtomMasks{
	mbmUndefined = 0,
	mbmLeftButton = 1,
	mbmMiddleButton = 2,
	mbmRightButton = 4,
	mbmPrimaryButton = mbmLeftButton,
	mbmSecondaryButton = mbmRightButton,
	mbmTertiaryButton = mbmMiddleButton
};




/**
\class MouseEvent MouseEvent.h "vcf/ApplicationKit/MouseEvent.h"
*/
class APPLICATIONKIT_API MouseEvent : public Event {
public:
	MouseEvent( Object* source ) : Event(source),
		keyMask_(0),buttonMask_(0){}

	MouseEvent( Object* source, const unsigned long& eventType ): Event(source,eventType),
		keyMask_(0),buttonMask_(0){}

	MouseEvent( Object* source, const unsigned long& eventType, const unsigned long& buttonMask,
		        const unsigned long& keyMask, Point* point ): Event(source,eventType),
		keyMask_(keyMask),buttonMask_(buttonMask),point_(*point){}

	MouseEvent( const MouseEvent& rhs ):Event(rhs),
		keyMask_(0),buttonMask_(0) {
		*this = rhs;
	}

	virtual ~MouseEvent(){};


	MouseEvent& operator=( const MouseEvent& rhs ) {
		Event::operator =( rhs );
		buttonMask_ = rhs.buttonMask_;
		keyMask_ = rhs.keyMask_;
		point_ = rhs.point_;
		return *this;
	}

	virtual Object* clone( bool deep=false ) {
		return new MouseEvent(*this);
	}

	/**
	*returns the point for this mouse event
	*/
    Point* getPoint(){
		return &point_;
	}

	void setPoint( Point* point ){
		point_.x_ = point->x_;
		point_.y_ = point->y_;
	}

    unsigned long getKeyMask(){
		return keyMask_;
	}

    unsigned long getButtonMask(){
		return buttonMask_;
	}
	
	/**
	indicates whether the mouse event has occurred while the 
	user has the left button down. 
	@see hasPrimaryButton()
	*/
	bool hasLeftButton(){
		return ( mbmLeftButton & buttonMask_ ) != 0;
	}

	/**
	indicates whether the mouse event has occurred while the 
	user has the middle button down. 
	@see hasTertiaryButton()
	*/
	bool hasMiddleButton(){
		return ( mbmMiddleButton & buttonMask_ ) != 0;
	}

	/**
	indicates whether the mouse event has occurred while the 
	user has the right button down. 
	@see hasSecondaryButton()
	*/
	bool hasRightButton(){
		return ( mbmRightButton & buttonMask_ ) != 0;
	}

	/**
	A more general call to determine which button is pressed
	down. This is the preferred call to make as it does
	not indicate a preference for a right-hand configured
	mouse.

	Indicates whether the mouse event has occurred while the 
	user has the primary button down. The primary button,
	on a mouse configured for right-handed users, is the 
	left button. For a mouse configured for left-handed 
	users it would be the right button.
	*/	
	bool hasPrimaryButton(){
		return ( mbmPrimaryButton & buttonMask_ ) != 0;
	}

	/**
	A more general call to determine which button is pressed
	down. This is the preferred call to make as it does
	not indicate a preference for a right-hand configured
	mouse.

	Indicates whether the mouse event has occurred while the 
	user has the secondary button down. The secondary button,
	on a mouse configured for right-handed users, is the 
	right button. For a mouse configured for left-handed 
	users it would be the left button.
	*/	
	bool hasSecondaryButton(){
		return ( mbmSecondaryButton & buttonMask_ ) != 0;
	}

	/**
	A more general call to determine which button is pressed
	down. This is the preferred call to make as it does
	not indicate a preference for a right-hand configured
	mouse.

	Indicates whether the mouse event has occurred while the 
	user has the tertiary button down. The tertiary button,
	on a mouse configured for right-handed or left-handed
	users, is the middle button.
	*/	
	bool hasTertiaryButton(){
		return ( mbmTertiaryButton & buttonMask_ ) != 0;
	}

	bool hasShiftKey(){
		return ( kmShift & keyMask_ ) != 0;
	}
	
	bool hasAltKey(){
		return ( kmAlt & keyMask_ ) != 0;
	}
	
	bool hasControlKey(){
		return ( kmCtrl & keyMask_ ) != 0;
	}

private:
    unsigned long buttonMask_;
    unsigned long keyMask_;
    Point point_;
};







/**
\class MouseEventHandler MouseEvent.h "vcf/ApplicationKit/MouseEvent.h"
*MouseEventHandler
*handles the following
*onMouseDoubleClicked
*onMouseClicked
*onMouseMove
*onMouseUp
*onMouseDown
*/
template <class SOURCE_TYPE>
class MouseEventHandler : public EventHandlerInstance<SOURCE_TYPE,MouseEvent> {
public:
	MouseEventHandler( SOURCE_TYPE* source,
		_typename_ EventHandlerInstance<SOURCE_TYPE,MouseEvent>::OnEventHandlerMethod handlerMethod,
		const String& handlerName="") :
			EventHandlerInstance<SOURCE_TYPE,MouseEvent>( source, handlerMethod, handlerName ) {

	}
};



};


/**
*CVS Log info
*$Log$
*Revision 1.3  2006/04/07 02:35:24  ddiego
*initial checkin of merge from 0.6.9 dev branch.
*
*Revision 1.2.6.4  2006/03/26 15:30:55  ddiego
*added more general fucntions to mouse event to determine which button is pressed.
*
*Revision 1.2.6.3  2006/03/14 02:25:47  ddiego
*large amounts of source docs updated.
*
*Revision 1.2.6.2  2006/02/17 05:23:05  ddiego
*fixed some bugs, and added support for minmax in window resizing, as well as some fancier control over tooltips.
*
*Revision 1.2.6.1  2005/11/21 04:00:51  ddiego
*more osx updates.
*
*Revision 1.2  2004/08/07 02:49:08  ddiego
*merged in the devmain-0-6-5 branch to stable
*
*Revision 1.1.2.3  2004/06/06 07:05:30  marcelloptr
*changed macros, text reformatting, copyright sections
*
*Revision 1.1.2.2  2004/04/29 03:43:14  marcelloptr
*reformatting of source files: macros and csvlog and copyright sections
*
*Revision 1.1.2.1  2004/04/28 00:28:18  ddiego
*migration towards new directory structure
*
*Revision 1.12.4.1  2004/04/26 21:58:37  marcelloptr
*changes for dir reorganization: _VCF_MACRO_H__
*
*Revision 1.12  2003/12/18 05:15:57  ddiego
*merge from devmain-0-6-2 branch into the stable branch
*
*Revision 1.11.2.2  2003/09/21 04:15:34  ddiego
*moved the cvs info data to teh bottom of the header instead of the
*top so it is easier to get to the actual header class declarations
*instead of having to wade through all the cvs info stuff.
*
*Revision 1.11.2.1  2003/09/12 00:09:33  ddiego
*added better tabbing behaviour - fixed an earlier bug.
*Code is easier to understand and it simplified the implementation
*a bit as well
*Moved around the RTTI definitions for various Appkit classes to a
*single inline and stripped them from the various class headers
*
*Revision 1.11  2003/08/09 02:56:43  ddiego
*merge over from the devmain-0-6-1 branch
*Changes
*Features:
*-Added additional implementation to better support the MVC architecture in
*the VCF
*
*-Added a Document/View architecure that is similar to MFC's or NextSteps's
*Doc/View architectures
*
*-Integrated the Anti Grain Graphics library into the GraphicsKit. There is
*now basic support for it in terms of drawing vector shapes
*(fills and strokes). Image support will come in the next release
*
*-Added several documented graphics tutorials
*
*Bugfixes:
*
*[ 775744 ] wrong buttons on a dialog
*[ 585239 ] Painting weirdness in a modal dialog ?
*[ 585238 ] Modal dialog which makes a modal Dialog
*[ 509004 ] Opening a modal Dialog causes flicker
*[ 524878 ] onDropped not called for MLTcontrol
*
*Plus an issue with some focus and getting the right popup window to activate
*has also been fixed
*
*Revision 1.10.2.1  2003/06/28 04:43:20  ddiego
*cleaned up the vcf/include/events directory and got rid of files, moving
*some of the various event handler template classes into the same header
*that the event handler's event is associated with
*also made some changes to properly take advantage of a Control's View, if it
*is set.
*
*Revision 1.10  2003/05/17 20:37:08  ddiego
*this is the checkin for the 0.6.1 release - represents the merge over from
*the devmain-0-6-0 branch plus a few minor bug fixes
*
*Revision 1.9.2.2  2003/03/13 05:07:25  ddiego
*added some more documentation, and implemented the clone() method in all of the
*core event classes for the FoundationKit, GraphicsKit, and ApplicationKit.
*
*Revision 1.9.2.1  2003/03/12 03:09:57  ddiego
*switched all member variable that used the "m_"<name> prefix to
* <name>"_" suffix nameing standard.
*Also changed all vcf builder files to accomadate this.
*Changes were made to the Stream classes to NOT multiple inheritance and to
*be a little more correct. Changes include breaking the FileStream into two
*distinct classes, one for input and one for output.
*
*Revision 1.9  2003/02/26 04:30:38  ddiego
*merge of code in the devmain-0-5-9 branch into the current tree.
*most additions are in the area of the current linux port, but the major
*addition to this release is the addition of a Condition class (currently
*still under development) and the change over to using the Delegate class
*exclusively from the older event handler macros.
*
*Revision 1.8.20.1  2002/12/25 22:06:25  ddiego
*whole bunch of little changes to the header files used by the ApplicationKit
*to get rid of no newline warnings by gcc.
*fixes to various event handlers in the ApplicationKit to compile with gcc
*since gcc does not like a member function pointer without the "&"
*addressof operator.
*Added initial file for the X11 UIToolkit implementation
*
*Revision 1.8  2002/02/20 04:07:59  ddiego
*consolidated event handling code a bit
*introduced a virtual handleEvent() method to Component
*clean up some of the event constants, so they are now localized in the
*appropriate control classes.
*
*Revision 1.7  2002/01/24 01:46:48  ddiego
*added a cvs "log" comment to the top of all files in vcf/src and vcf/include
*to facilitate change tracking
*
*/


#endif // _VCF_MOUSEEVENT_H__


