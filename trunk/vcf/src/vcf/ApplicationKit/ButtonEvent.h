#ifndef _VCF_BUTTONEVENT_H__
#define _VCF_BUTTONEVENT_H__
//ButtonEvent.h

/*
Copyright 2000-2004 The VCF Project.
Please see License.txt in the top level directory
where you installed the VCF.
*/


#if _MSC_VER > 1000
#   pragma once
#endif


/* Generated by Together */




namespace VCF{

/**
\class ButtonEvent ButtonEvent.h "vcf/ApplicationKit/ButtonEvent.h"
*A ButtonEvent is fired whenever a button is pressed
*or clicked.
*/
class APPLICATIONKIT_API ButtonEvent : public Event {
public:
	ButtonEvent( Object * source, const uint32& stateMask ):
	  Event( source )  {
		  stateMask_ = stateMask;
	}

	ButtonEvent( const ButtonEvent& rhs ):Event(rhs) {
		*this = rhs;
	}

	ButtonEvent& operator= ( const ButtonEvent& rhs ) {
		Event::operator= (rhs);
		stateMask_ = rhs.stateMask_;
		return *this;
	}

	virtual ~ButtonEvent(){};

    uint32 getStateMask() {
		return stateMask_;
	}


	virtual Object* clone( bool deep=false ) {
		return new ButtonEvent(*this);
	}
private:
    uint32 stateMask_;
};


typedef Delegate1<ButtonEvent*> ButtonDelegate; 
typedef ButtonDelegate::ProcedureType ButtonHandler;

}


#endif // _VCF_BUTTONEVENT_H__

/**
$Id$
*/
