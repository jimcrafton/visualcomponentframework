<!-- 
Copyright (c) 2003, Author Name
All rights reserved.
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:
 Redistributions of source code must retain the above copyright
 notice, this list of conditions and the following disclaimer.

 Redistributions in binary form must reproduce the above copyright
 notice, this list of conditions and the following disclaimer in 
 the documentation and/or other materials provided with the distribution.
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE REGENTS
OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES \(INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION\) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT \(INCLUDING
NEGLIGENCE OR OTHERWISE\) ARISING IN ANY WAY OUT OF THE USE OF THIS 
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

NB: This software will not save the world.
-->
 

<section><title>Hello World Part 2</title>
	<para>
		This example builds on our work in the first example, HelloWorld.
		This will demonstrate customizing the VCF::Application class
		and positioning the window where we want it.
	</para>
	<para>
	The first step is to create an new application class, and derive it from VCF::Application.
	We'll call this class HelloWorld2Application. We'll override a single method
	from VCF::Application, initRunningApplication(). The initRunningApplication() method
	is called just after the application kit has initialized itself and the rest of the VCF.
	You custom startup code can safely call any VCF method, or create any neccessary VCF object
	that you may need. Please note that if you have succesfully initialized your application 
	then you should return true from initRunningApplication(), otherwise return false, ot have the
	ApplicationKit gracefully shut the application and itself down. As in other methods you override you should make sure to call the super classes 
	initRunningApplication(), failure to do this will result in an undefined state for the Application.
	</para>
	<para>
	In our custom initRunningApplication() method we'll create a new instance of a VCF::Window. 
	<programlisting>
<![CDATA[
class HelloWorld2Application : public Application {
public:
	//remainder of code ommitted for clarity

	virtual bool initRunningApplication(){ 
		//call the super classes initRunningApplication()
		bool result = Application::initRunningApplication();
		
		
		//create the window as before
		Window* mainWindow = new Window();
	}

]]>
</programlisting>
	Next we'll set application's main window. This is accomplished by calling the VCF::APplication's
	setMainWindow() method, passing in our new window instance.
	<programlisting>
<![CDATA[
	//remainder of code ommitted for clarity

	virtual bool initRunningApplication(){ 
		//remainder of code ommitted for clarity
		
		setMainWindow( mainWindow );
	}

]]>
	</programlisting>	
	</para>
	<para>
	Next we'll prepare to position the window. This is done by passing in a pointer to a VCF::Rect instance
	to the VCF::Window::setBounds() method. We can create the Rect on the stack and then just pass in the 
	pointer to it. Alternately, we could have created a temporary Rect instance on the stack and passed 
	the temporary in as well.
	<programlisting>
<![CDATA[
	//remainder of code ommitted for clarity

	virtual bool initRunningApplication(){ 
		//remainder of code ommitted for clarity
		
		Rect mainWindowBounds( 100.0, 100.0, 500.0, 500.0 );
		mainWindow->setBounds( &mainWindowBounds );
	}

]]>
  </programlisting>
	The rectangular bounds is defined as 4 coordinates, an X and Y coordinate for the top left corner,
	and another X and Y coordinate for the bottom right corner of the Window. These coordinates are always
	in the coordinate space of the parent control, and since a Window doesn't have a parent, the coordinates
	are in the screen coordinate space.
	</para>
	<para>
	Finally, we'll actually show the window - remember to do this step or your window will not be visible 
	(there are alternate ways of handling this, but we are not going to cover them here).
	<programlisting>
<![CDATA[
	//remainder of code ommitted for clarity

	virtual bool initRunningApplication(){ 
		//remainder of code ommitted for clarity
		mainWindow->show();
	}

]]>
	</programlisting>
	</para>
	<para>
	So we can see that creating a new window is quite easy, and we have also learned to customize the
	start up behaviour of our application.
	</para>
</section>





<!--
CVS Log info

$Log$

Revision 1.2  2003/12/18 05:15:54  ddiego

merge from devmain-0-6-2 branch into the stable branch


Revision 1.1.2.5  2003/09/29 03:48:03  ddiego

added the app iconms ex



-->
