<HTML>
 <HEAD>
  <!-- $MVD$:app("RoboHELP HTML Edition by Blue Sky Software, portions by MicroVision Dev. Inc.","769") -->
  <!-- $MVD$:template("","0","0") -->
  <!-- $MVD$:color("18","b5edfb","Code Orange","1") -->
  <!-- $MVD$:color("19","ffefce","Custom #1","0") -->
  <!-- $MVD$:color("20","b58800","Custom #2","0") -->
  <!-- $MVD$:color("21","333333","Custom #3","0") -->
  <!-- $MVD$:color("22","ee4444","Custom #4","0") -->
  <!-- $MVD$:color("23","ffcc99","Custom #5","0") -->
  <!-- $MVD$:color("24","ff6600","Custom #6","0") -->
  <!-- $MVD$:color("25","eeeeee","Custom #7","0") -->
  <!-- $MVD$:color("26","204060","Custom #8","0") -->
  <!-- $MVD$:color("27","80e0","Custom #9","0") -->
  <!-- $MVD$:color("28","206080","Custom #10","0") -->
  <!-- $MVD$:color("29","802000","Custom #11","0") -->
  <!-- $MVD$:fontset("Trebuchet MS","Trebuchet MS") -->
  <TITLE>Graphics Basics</TITLE>
  <META NAME="generator" CONTENT="RoboHELP by Blue Sky Software www.blue-sky.com HTML Edition">
  <SCRIPT LANGUAGE="javascript" TITLE="BSSC Special Effects" SRC="BSSCDHTM.js">
 </SCRIPT><LINK
  REL="StyleSheet" HREF="default.css"></HEAD>
  <BODY ONLOAD="BSSCOnLoad();" ONCLICK="BSSCOnClick();" ONUNLOAD="BSSCOnUnload();">
  <P>
   <IMG SRC="vcflogo.gif" WIDTH="230" HEIGHT="172" VSPACE="0" HSPACE="0" BORDER="0"></P>
  <H1>
   Graphics Basics</H1>
  <P>
   The GraphicsKit has several layers, high level classes that wrap up 
   the more complex graphics operation with the intent of making these 
   things easy to do or to customize, and lower level classes that 
   provide the basic graphics primitives. Both of these layers are 
   windowing system independent, while the final layer, consisting of a 
   set of peers, is completely windowing system dependent. The peer 
   classes are first described through an interface (or a class with 
   nothing but virtual pure methods) which lays out the ideal set of 
   methods to use, and then are implemented for whatever windowing 
   system you are porting to.</P>
  <P>
   So lets take a look at the basic graphics class, the GraphicsContext. 
   The GraphicsContext provides basic 2D graphics primitive operations 
   for the framework, and represents a virtual canvas on which one can 
   draw. The GraphicsContext can function as a memory buffer for 
   drawing, can be attached to some control (in which case it represents 
   the screen real estate directly), or can have support for OpenGL calls.</P>
  <P>
   Notice that not all of the functions defined in GraphicsContext are 
   mirrored in the ContextPeer interface .&nbsp; The graphics primitives 
   are modeled after the basic PostScript calls, so nothing is drawn 
   until either strokePath() or fillPath() is called. Basic primitives 
   are defined for drawing lines, curves, and polylines, as well as 
   rectangles, ellipses, and circles.
 </BODY>
</HTML>