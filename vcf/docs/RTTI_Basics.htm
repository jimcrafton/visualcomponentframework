<HTML>
 <HEAD>
  <!-- $MVD$:app("RoboHELP HTML Edition by Blue Sky Software, portions by MicroVision Dev. Inc.","769") -->
  <!-- $MVD$:template("","0","0") -->
  <!-- $MVD$:fontset("Arial","Arial") -->
  <!-- $MVD$:fontset("Verdana","Verdana") -->
  <!-- $MVD$:fontset("Courier New","Courier New") -->
  <TITLE>RTTI Basics</TITLE>
  <META NAME="generator" CONTENT="Microsoft FrontPage 4.0">
  <SCRIPT LANGUAGE="javascript" TITLE="BSSC Special Effects" SRC="BSSCDHTM.js">
 </SCRIPT><LINK REL="StyleSheet" HREF="default.css"></HEAD>
  <BODY >
  <H1>
   <IMG SRC="vcflogo.gif" width="230" height="172" VSPACE="0" HSPACE="0" BORDER="0"></H1>
  <H1>
   RTTI Basics</H1>
  <p>RTTI, or Run Time Type Information, is used in the VCF to dynamically identify
  objects during the execution of a program. Most large frameworks, or
  object-oriented languages have some form of RTTI, some examples are Smalltalk,
  ObjectiveC, CORBA, COM, ObjectPascal, and Java (in Java RTTI is frequently referred to as reflection,
  and is defined in the java.lang.reflect package). RTTI can be used to identify
  the object's class name, the methods of a class, the properties of a class,
  and the events that the object fires. In addition, RTTI allows the dynamic
  creation of objects at runtime without having direct (compile-time) knowledge
  of the objects class definition. In the VCF this dynamic creation can take
  place by either specifying the class name or UUID, or creating an instance
  that supports a particular interface from the interface name or UUID. </p>
  <p>Obviously C++ itself does not support many of these features. The RTTI that
  is supported in the language standard allows for dynamic class identification,
  and dynamically casting an object to a specific class such that if the object
  does not derive from the class, a null pointer is returned. This allows us to
  &quot;query&quot; for interfaces that a particular object instance may&nbsp;
  support. To support the more advanced features mentioned above requires additional work on the part
  of the programmer by using special functions and classes provided by the VCF
  to accomplish this. Currently there are two approaches to add this
  support to you classes, the first, which will be documented here, uses macros
  that you add to your class definition. The second, newer method uses the RTTI
  Compiler, which can parse the C++ headers of your choice and correctly
  generate C++ code for you that will properly register all of your classes RTTI
  data for you. No macros are necessary when using this method, which perhaps
  results in slightly cleaner code and is potentially less error prone. </p>
  <p>Before discussing the macros that are used to register the various RTTI
  data, lets discuss further what each of the data types are. The initial RTTI
  data type is described by the class <code>VCF::Class</code>, which contains
  everything necessary to describe a&nbsp; object's class information at run
  time. The VCF::Class holds the class name, the super class name, and the UUID
  that identifies the class. </p>
  <p>&nbsp; </p>
 </BODY>
</HTML>