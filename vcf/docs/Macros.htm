<HTML>
 <HEAD>
  <!-- $MVD$:app("RoboHELP HTML Edition by Blue Sky Software, portions by MicroVision Dev. Inc.","769") -->
  <!-- $MVD$:template("","0","0") -->
  <!-- $MVD$:color("18","b5edfb","Code Orange","1") -->
  <!-- $MVD$:color("19","ffefce","Custom #1","0") -->
  <!-- $MVD$:color("20","b58800","Custom #2","0") -->
  <!-- $MVD$:color("21","333333","Custom #3","0") -->
  <!-- $MVD$:color("22","ee4444","Custom #4","0") -->
  <!-- $MVD$:color("23","ffcc99","Custom #5","0") -->
  <!-- $MVD$:color("24","ff6600","Custom #6","0") -->
  <!-- $MVD$:color("25","eeeeee","Custom #7","0") -->
  <!-- $MVD$:color("26","204060","Custom #8","0") -->
  <!-- $MVD$:color("27","80e0","Custom #9","0") -->
  <!-- $MVD$:color("28","206080","Custom #10","0") -->
  <!-- $MVD$:color("29","802000","Custom #11","0") -->
  <!-- $MVD$:fontset("Trebuchet MS","Trebuchet MS") -->
  <TITLE>Macros</TITLE>
  <META NAME="generator" CONTENT="Microsoft FrontPage 4.0">
  <SCRIPT LANGUAGE="javascript" TITLE="BSSC Special Effects" SRC="BSSCDHTM.js">
 </SCRIPT><LINK
  REL="StyleSheet" HREF="default.css">
 <META NAME="generator" CONTENT="Microsoft FrontPage 4.0"></HEAD>
  <BODY ONLOAD="BSSCOnLoad();" ONCLICK="BSSCOnClick();" ONUNLOAD="BSSCOnUnload();">
  <P>
   <IMG SRC="vcflogo.gif" WIDTH="230" HEIGHT="172" VSPACE="0" HSPACE="0" BORDER="0"></P>
  <H1>
   Macros</H1>
  <P>
   <!-- $MVD$:spaceretainer() -->&nbsp;</P>
  <H4>
   <SPAN STYLE="font-weight : bold;">Core Class macros</SPAN></H4>
  <P>
   <CODE>BEGIN_CLASSINFO( ClassType, ClassName, superClassName, classID )</CODE><BR>
   Use this to begin your class's RTTI definition. The <SPAN STYLE="font-style : italic;">ClassType</SPAN> 
   is the type of your class, the <SPAN STYLE="font-style : italic;">ClassName</SPAN> 
   is a String that will represent the name of you class in the 
   ClassRegistry. It is good practice to include the fully qualified 
   class name, i.e. if your class is within a namespace then include the 
   namespace as well as in &quot;VCF::Object&quot;, not 
   &quot;Object&quot;. The <SPAN STYLE="font-style : italic;">superClassName</SPAN> 
   is a String as well, that represents the main class that your class 
   derives from. The same rules apply to this name as to ClassName, a 
   fully qualified name is preferred. The classID is a string that 
   represents a <A HREF="JavaScript:hhctrl.TextPopup('A Universally Unique IDentifier that is guaranteed to be unique across computers. In COM this is known as GUID. Commonly used in distributed architectures like CORBA to identify objects or classes.','Arial,8',10,10,00000000,0xc0ffff)">UUID</A>.</P>
  <P>
   <!-- $MVD$:spaceretainer() -->&nbsp;</P>
  <P>
   <CODE>BEGIN_ABSTRACT_CLASSINFO( ClassType, ClassName, superClassName, 
   classID )</CODE><BR>
   This is similar to the BEGIN_CLASSINFO macro, but allows for RTTI 
   information that supports abstract classes. Calls to the 
   ClassRegistry's newInstance() method will fail for classes of this type.</P>
  <P>
   <CODE>END_CLASSINFO( ClassType )</CODE><BR>
   This ends the class's RTTI information entries. The <SPAN STYLE="font-style : italic;">ClassType</SPAN> 
   must be the same type as used in the <code> BEGIN_CLASSINFO</code> or <code> 
   BEGIN_ABSTRACT_CLASSINFO</code> macro.</P>
  <H4>
   <SPAN STYLE="font-weight : bold;">Property RTTI macros</SPAN></H4>
  <P>
   <CODE>PROPERTY( type, propName, getFunc, setFunc, propType )</CODE><BR>
   Registers a read/write property for basic types ( int, long, bool, 
   char, short, double, float). The type argument is the primitive type, 
   such as an int or bool. The getFunc and setFunc arguments represent 
   the corresponding function pointers for getting and setting values of 
   the property. The propType argument identifies what the type of the 
   property is to the VCF RTTI world. Thus most primitives have 
   corresponding types, such as a long corresponds to a PROP_LONG, a 
   char is a PROP_CHAR, and so forth.</P>
  <P>
   Example:</P><PRE><FONT
    SIZE="2">PROPERTY( double, &quot;left&quot;, Rect::getLeft, Rect::setLeft, PROP_DOUBLE )</FONT></PRE><P>
   <CODE>READONLY_PROPERTY( type, propName, getFunc, propType )</CODE><BR>
   This macros registers a read only property. It is identical in usage 
   to the <code> PROPERTY</code> macro described above, except that the set&nbsp;</P>
  <P>
   <CODE>OBJECT_PROPERTY( type, propName, getFunc, setFunc )</CODE></P>
  <P>
   <CODE>READONLY_OBJECT_PROPERTY( type, propName, getFunc )</CODE></P>
  <P>
   <CODE>ENUM_PROPERTY(type,propName,getFunc,setFunc, lower, upper)</CODE></P>
  <P>
   <CODE>LABELED_ENUM_PROPERTY(type,propName,getFunc,setFunc, lower, 
   upper, count, enumNames)</CODE></P>
  <P>
   <CODE>READONLY_ENUM_PROPERTY(type,propName,getFunc,lower, upper)</CODE></P>
  <P>
   <CODE>READONLY_LABELED_ENUM_PROPERTY(type,propName,getFunc,lower, 
   upper, count, enumNames)</CODE></P>
  <P>
   <CODE>COLLECTION_PROPERTY( type,propName,getFunc, propType )</CODE></P>
  <P>
   <CODE>OBJECT_COLLECTION_PROPERTY( type,propName,getFunc, addFunc, 
   insertFunc, deleteFunc1, deleteFunc2 )</CODE></P>
  <H4>
   <SPAN STYLE="font-weight : bold;">Method RTTI macros</SPAN></H4>
  <P>
   <CODE>METHOD_VOID( methodName, classType, methType, methodPtr )</CODE></P>
  <P>
   <CODE>METHOD_1VOID( methodName, classType, methType, argType, 
   methodPtr, argTypeDesc )</CODE></P>
  <P>
   <CODE>METHOD_2VOID( methodName, classType, methType, argType1, 
   argType2, methodPtr, argTypeDesc )</CODE></P>
  <P>
   <CODE>EVENT( 
   eventClassName,eventMethodName,listenerClassName,adapterClassName )</CODE></P>
  <P>
   &nbsp;</P>
  <P>
   <!-- $MVD$:spaceretainer() -->&nbsp;
 <OBJECT
 CLASSID="clsid:ADB880A6-D8FF-11CF-9377-00AA003B7A11"
 ID="hhctrl"
    WIDTH="0"
    HEIGHT="0"
    BORDER="0"
    VSPACE="0"
    HSPACE="0" TYPE="application/x-oleobject">
 </OBJECT></BODY>
</HTML>