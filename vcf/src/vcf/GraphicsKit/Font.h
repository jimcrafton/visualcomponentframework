#ifndef _VCF_FONT_H__
#define _VCF_FONT_H__
//Font.h

/*
Copyright 2000-2004 The VCF Project.
Please see License.txt in the top level directory
where you installed the VCF.
*/


#if _MSC_VER > 1000
#   pragma once
#endif


/* Generated by Together */




namespace VCF {

#define DEFAULT_FONT_PT_SIZE	8
#define DEFAULT_FONT_NAME		"Arial"

class FontPeer;
class Locale;
class GraphicsContext;




typedef Delegate1<Event*> FontChangedDelegate;


#define FONT_CLASSID	"C41B2C4C-C95F-4ba2-B844-185C3AFCEF35"
/**
\class Font Font.h "vcf/GraphicsKit/Font.h"
A Font wraps the windowing system's graphics font object.
Fonts are used to (partially) describe how a string of 
text will be rendered, for example the size of the glyphs 
used to paint the text characters on the screen.

A Font has a number of properties that can be set, such 
as it's name, color, size (both in points and in pixels), and
so on. If you change a font's property, the font will fire off 
an event that can be handled by some other object, for 
example if you needed to recalculate some setting based on
the characteristics of teh font, you handle this kind of event
to always keep in synch with the font's settings.
*/
class GRAPHICSKIT_API Font : public Object {

public:
	/**
	This enum describes the various event types that
	changes to a font can produce.
	*/
	enum FontChangeEvent{
		/**
		An event is fired of this type if the font's 
		name is changed.
		*/
		fcFontName = 0xF097,

		/**
		An event is fired of this type if the font's 
		italic attribute (true or false) is changed.
		*/
		fcFontItalic,

		/**
		An event is fired of this type if the font's 
		bold attribute (true or false) is changed.
		*/
		fcFontBold,

		/**
		An event is fired of this type if the font's 
		strike out attribute (true or false) is changed.
		*/
		fcFontStrikeOut,

		/**
		An event is fired of this type if the font's 
		underline attribute (true or false) is changed.
		*/
		fcFontUnderline,

		/**
		An event is fired of this type if the font's 
		size attribute is changed.
		*/
		fcFontSize,

		/**
		An event is fired of this type if the font's 
		color attribute is changed.
		*/
		fcFontColor,

		/**
		An event is fired of this type if the font's 
		locale instance is changed.
		*/
		fcFontLocale,

		fcAll
	};

	/**
	an event is fired every time a font is changed.
	This let the peer of a control to be notified of the change
	even when the font is not changed through its
	associated control.
	*/

	/**
	@delegate FontChanged this is is fired every time a font is 
	changed. This let the peer of a control to be notified of the 
	change even when the font is not changed through its associated 
	control.
	@event	Event
	@eventtype FontChangeEvent
	*/
	DELEGATE(FontChangedDelegate,FontChanged);

	Font();

	/**
	Constructs a font from a valid font name (say "Tiems New Roman") - 
	the size of the font is the default font size for the system.
	*/
	Font( const String& fontName );

	/**
	Constructs a font from a name and a size in points.
	*/
	Font( const String& fontName, const double& pointSize );

	Font( const Font& font );

	virtual ~Font();

	Font& operator= (const Font& rhs );

	/**
	Returns true if the font is a True Type font. On Windows some 
	font's are \em not True Type font's and because of this they 
	will not respond to certain effects (such as being rotated).
	*/
	bool isTrueType() const;

	/**
	returns the Color the Font will be rendered in
	*/
	Color* getColor() ;


	/**
	*sets the Color to render the Font in
	*/
	void setColor( Color* color );

	/**
	*return the point size of the Font. One point is 1/72 of an inch
	*( or 0.0352552 cm for our more civilized friends !), so to figure
	*out the pixels involved, find out the Pixels per Inch and then apply
	*the following formula
	*<code>
	* (PointSize / 72) * PPI
	*</code>
	*where PPI represents the Pixels Per Inch
	*/
	double getPointSize() const;


	/**
	*sets the point size of the Font
	*/
	void setPointSize( const double& pointSize );

	double getPixelSize() const;
	void setPixelSize( const double& pixelSize );

	void setBold( const bool& bold );
	bool getBold() const;

	bool getItalic() const;
	void setItalic( const bool& italic );

	bool getUnderlined() const;
	void setUnderlined( const bool& underlined );

	bool getStrikeOut() const;
	void setStrikeOut( const bool& strikeout );
	
	String getName() const;

	void setName( const String& name );


	void setAttributes( const double& pointSize, const bool& bold, const bool& italic,
								const bool& underlined, const bool& struckOut,
								const Color* color, const String& name );

	FontPeer* getFontPeer();

	virtual void copy( Object* source );

	virtual Object* clone( bool deep ) {
		return new Font(*this);
	}

	double getAscent()  const;

	double getDescent()  const;

	double getHeight()  const;

	bool isFixedPitch() const ;
	/**
	Get the locale associated with this font. May be NULL, in which case this
	is whatever the System's default locale is.
	*/
	Locale* getLocale() const  {
		return locale_;
	}

	/**
	Set the locale of this font. This may change the script used by the 
	font when being rendered.
	*/
	void setLocale( Locale* locale );

	/**
	Sets the GraphicsContext for the font. This is used for special cases
	where calculations may need to be determined based on the information
	in the GraphicsContext. For example, the font peer may need information
	from the context peer when making font size calculations, particularly
	during printing.
	*/
	void setGraphicsContext( GraphicsContext* context ) {
		context_ = context;
	}

	/**
	Returns the current graphics context that's associated with this font.
	By default this value will be NULL.
	*/
	GraphicsContext* getGraphicsContext() {
		return context_;
	}

	virtual uint64 Font::sizeOf() const;

	double getTextWidth( const String& text );
	double getTextHeight( const String& text );
protected:

	FontPeer* peer_;
	Color color_;
	Locale* locale_;
	GraphicsContext* context_;

	void changed( int eventType );
};

};


#endif // _VCF_FONT_H__

/**
$Id$
*/
