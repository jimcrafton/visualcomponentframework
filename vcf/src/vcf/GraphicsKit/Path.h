#ifndef _VCF_PATH_H__
#define _VCF_PATH_H__
//Path.h

/*
Copyright 2000-2004 The VCF Project.
Please see License.txt in the top level directory
where you installed the VCF.
*/


#if _MSC_VER > 1000
#   pragma once
#endif


/* Generated by Together */



namespace VCF{


class Matrix2D;

/**
\class PathPoint Path.h "vcf/GraphicsKit/Path.h"
*utility to make working with path points easier
*/
class GRAPHICSKIT_API PathPoint {
public:
	enum PointType{
		ptUnknown = 0,
		ptMoveTo,
		ptLineTo,
		ptQuadTo,
		ptCubicTo,
		ptClose
	};

	PathPoint() :type_(ptUnknown) {

	}

	PathPoint( double x, double y, PointType type ){
		type_ = type;
		point_.x_ = x;
		point_.y_ = y;
	}

	PathPoint( Point* pt, PointType type ){
		type_ = type;
		point_.x_ = pt->x_;
		point_.y_ = pt->y_;
	}

	PathPoint( const Point& pt, PointType type ){
		type_ = type;
		point_.x_ = pt.x_;
		point_.y_ = pt.y_;
	}

	PathPoint( const PathPoint& pt ){
		point_.x_ = pt.point_.x_;
		point_.y_ = pt.point_.y_;
		type_ = pt.type_;
	};

	virtual ~PathPoint(){};

	PathPoint& operator=( const PathPoint& pt ){
		if (this != &pt) {
			point_.x_ = pt.point_.x_;
			point_.y_ = pt.point_.y_;
			type_ = pt.type_;
		}
		return *this;
	};

	bool operator==( const PathPoint& pt )const {
		return (point_.x_ == pt.point_.x_) &&
				(point_.y_ == pt.point_.y_) &&
				(type_ == pt.type_);
	};

	/**
	The x,y coordinate of the point. 
	*/
	Point point_;

	/**
	The path type - the type may be one of 
		\li ptMoveTo
		\li ptLineTo
		\li ptQuadTo
		\li ptCubicTo
		\li ptClose
	*/
	PointType type_;
};


/**
\class Path Path.h "vcf/GraphicsKit/Path.h"
A Path is an abstract class that represents a series of points used to 
draw one or more shapes. The path instance is used in conjuntion with a 
fill and/or a stroke instance to actually render the shape on the 
graphics context.

@see GraphicsContext
@see Fill
@see Stroke
*/
class GRAPHICSKIT_API Path : public Interface{
public:
	enum WindingRule {
		wrEvenOdd=0,
		wrNonZero
	};

	virtual ~Path(){};

	/**
	Applies the transform to the path
	*/
	virtual void applyTransform( const Matrix2D& transform ) = 0;

	/**
	Returns true or false, depending on whether or not the path
	includes, or contains, the specified rectangle. 
	@return bool Returns true if the rect is within the bounds of the
	shape, otherwise false.
	*/
    virtual bool contains(const Rect& rect ) = 0;


	/**
	Returns true or false, depending on whether or not the path
	includes, or contains, the specified point. 
	@return bool Returns true if the point is within the bounds of the
	shape, otherwise false.
	*/
    virtual bool contains( const Point& pt ) = 0;


	/**
	Returns true or false, depending on whether or not the 
	specified point intersects any part of the path. 
	@return bool Returns true if the point intersects 
	the shape, otherwise false.
	*/
    virtual bool intersects( const Point& pt ) = 0;

	/**
	Returns true or false, depending on whether or not the 
	specified rectangle intersects any part of the path. 
	@return bool Returns true if the rectangle intersects 
	the shape, otherwise false.
	*/
    virtual bool intersects( const Rect& rect ) = 0;

	/**
	returns the smallest rectangular bounds that fully enclose this path
	*/
    virtual Rect getBounds() = 0;

	/**
	Returns the winding rule for the path. This affects how the path get rendered.
	*/
	virtual WindingRule getWindingRule() = 0;

	virtual void setWindingRule( WindingRule rule ) = 0;

	/**
	This fills in the points vector with a series of all the points that make 
	up the path. If the path were to describe a rectangle, then more than 
	likely the points parameter would be filled with 4 points for the 4 corners 
	of the rectangle.
	@param std::vector<PathPoint>
	@param Matrix2D a pointer to an affine matrix. This matrix is used to apply a 
	transformation to the returned points. It does \em not modify the path. The 
	matrix instance is optional, and may be NULL.
	@return bool returns true if the points vector is non empty 
	(i.e. points.emtpy() == false).
	*/
	virtual bool getPoints( std::vector<PathPoint>& points, Matrix2D* transform ) = 0;

	/**
	This does the same thing as getPoints(), only it "flattens" the path if 
	neccessary.	For example, if you had a path that was a bezier curve, it might 
	be made of 4 points, the start point, 1st control point, 2nd control point, 
	and end point. Calling getPoints would returns these 4 points, where as 
	calling flattenPoints() would "flatten" the curve, and return a series of 
	points that approximate the curve. How closely the flattened points approximate
	the curve is entirely up to the implementor of the Path class.
	*/
	virtual void flattenPoints( std::vector<Point>& flattenedPoints ) = 0;
};





};


#endif // _VCF_PATH_H__

/**
$Id$
*/
