#ifndef _VCF_BASICSTROKE_H__
#define _VCF_BASICSTROKE_H__
//BasicStroke.h

/*
Copyright 2000-2004 The VCF Project.
Please see License.txt in the top level directory
where you installed the VCF.
*/


#if _MSC_VER > 1000
#   pragma once
#endif


/* Generated by Together */



namespace VCF{

class GraphicsContext;
/**
\class BasicStroke BasicStroke.h "vcf/GraphicsKit/BasicStroke.h"
*/
class GRAPHICSKIT_API BasicStroke : public VCF::Object, public VCF::Stroke {
public:
	BasicStroke();

	virtual ~BasicStroke();

	virtual void setContext( GraphicsContext* context );

    virtual void render( Path * path );

	double getWidth();

	void setWidth( double width );

	Color* getColor();

	void setColor( Color* color );
	
	bool allowAntiAlias() {
		return antiAlias_;
	}

	void setAllowAntiAlias( bool val ) {
		antiAlias_ = val;
	}

	/**
	Adds a dash and gap. Only takes effect if using AGG
	renering buffer.
	*/
	void addDash( const double& dash, const double& gap ) {
		dashed_ = true;
		dashGapLen_.push_back( std::make_pair( dash, gap ) );
	}

	/**
	Distance at which dashing starts.
	*/
	void dashStart( const double& dashStart ) {
		dashStart_ = dashStart;
	}

	/**
	Removes ALL dashes that are set.
	*/
	void removeDashes() {
		dashed_ = false;
		dashStart_ = 0.0;
		dashGapLen_.resize(0);
	}

private:
	double width_;
	Color color_;
	GraphicsContext* context_;
	bool antiAlias_;
	bool dashed_;
	double dashStart_;
	std::vector< std::pair<double,double> > dashGapLen_;

	void line( const double& x1, const double& y1,
		       const double& x2, const double& y2 );
};

}


#endif // _VCF_BASICSTROKE_H__

/**
$Id$
*/
