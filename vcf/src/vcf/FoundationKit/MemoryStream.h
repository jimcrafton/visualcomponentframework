#ifndef _VCF_MEMORYSTREAM_H__
#define _VCF_MEMORYSTREAM_H__
//MemoryStream.h

/*
Copyright 2000-2004 The VCF Project.
Please see License.txt in the top level directory
where you installed the VCF.
*/


#if _MSC_VER > 1000
#   pragma once
#endif


/* Generated by Together */


namespace VCF{


/**
\class MemoryStream MemoryStream.h "vcf/FoundationKit/MemoryStream.h"
A MemoryStream a stream for in memory data for both reading
and writing
*/
class FOUNDATIONKIT_API MemoryStream : public VCF::InputStream, public VCF::OutputStream, public VCF::Object {
public:
	MemoryStream();

	/**
	*This constructor is used in stream chaining.
	*The flow goes from the MemoryStream to the outStream.
	*So if a write is called on the MemoryStream, it simply
	*passes it to the outStream's write() method
	*/
	MemoryStream( OutputStream* outStream );

	/**
	*This constructor is used in stream chaining.
	*The flow goes from the MemoryStream to the inStream.
	*So if a read is called on the MemoryStream, it simply
	*passes it to the inStream's read() method
	*/
	MemoryStream( InputStream* inStream );

	virtual ~MemoryStream();

	virtual char* getBuffer(){
		return NULL;
	};

	virtual void seek(const uint64& offset, const SeekType& offsetFrom);

    virtual uint64 getSize();

	virtual uint64 getCurrentSeekPos() ;

	virtual void write( Persistable* persistableObject );

	virtual uint64 write( const unsigned char* bytesToWrite, uint64 sizeOfBytes );

	virtual uint64 read( unsigned char* bytesToRead, uint64 sizeOfBytes );

	void init();

	virtual bool isEOS()
	{
		// stub impl.
		return false;
	}
private:
	CharMemStream stream_;
	OutputStream* outputStream_;
	InputStream* inputStream_;
	uint64 size_;
	uint64 currentSeekPos_;
};

};


#endif // _VCF_MEMORYSTREAM_H__

/**
$Id$
*/
