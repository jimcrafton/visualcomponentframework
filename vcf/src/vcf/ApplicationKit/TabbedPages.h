#ifndef _VCF_TABBEDPAGES_H__
#define _VCF_TABBEDPAGES_H__
//TabbedPages.h

/*
Copyright 2000-2004 The VCF Project.
Please see License.txt in the top level directory
where you installed the VCF.
*/


#if _MSC_VER > 1000
#   pragma once
#endif


/* Generated by Together */


#ifndef _VCF_TABMODEL_H__
#	include "vcf/ApplicationKit/TabModel.h"
#endif // _VCF_TABMODEL_H__

#ifndef _VCF_TABPAGE_H__
#	include "vcf/ApplicationKit/TabPage.h"
#endif // _VCF_TABPAGE_H__



#ifndef _VCF_PUSHBUTTON_H__
#	include "vcf/ApplicationKit/PushButton.h"
#endif // _VCF_PUSHBUTTON_H__

#ifndef _VCF_PANEL_H__
#	include "vcf/ApplicationKit/Panel.h"
#endif // _VCF_PANEL_H__



namespace VCF  {

#define TABBEDPAGES_CLASSID		"4A9D66D6-3B26-11d4-B54C-00C04F0196DA"


class TabSheet;

/**
\class TabbedPages TabbedPages.h "vcf/ApplicationKit/TabbedPages.h"
*/
class APPLICATIONKIT_API TabbedPages : public CustomControl, public DelegatedContainer<TabbedPages> {
public:

	TabbedPages();
	virtual ~TabbedPages();

	void init();

	virtual void paint( GraphicsContext* context );

	TabModel* getTabModel();

	void setTabModel( TabModel* model );	

	virtual void modelChanged( Model* oldModel, Model* newModel );

	TabPage* addNewPage( const String& caption );

	virtual Rect getClientBounds( const bool& includeBorder=true );

	virtual void mouseDown( MouseEvent* event );

	virtual void mouseMove( MouseEvent* event );

	virtual void mouseUp( MouseEvent* event );

	double getBorderWidth();

	void setBorderWidth( const double& borderWidth );

	double getTabHeight();

	void setTabHeight( const double& tabHeight );

	TabPage* getTabPage( const uint32& index );
	void setTabPage( const uint32& index, TabPage* page );

	TabPage* getPageFromPageName( const String& pageName );

	TabPage* getSelectedPage();
	void setSelectedPage( TabPage* page );
	
	void setSelectedPageByIndex( const uint32& index );

	TabSheet* getSelectedSheet();
	void setSelectedSheet( TabSheet* sheet );

	
	

	bool isFirstPage( TabPage* page );
	bool isLastPage( TabPage* page );
	TabPage* nextPage( TabPage* page );
	TabPage* previousPage( TabPage* page );

	Enumerator<TabPage*>* getPages();

	virtual void handleEvent( Event* e );

	TabPage* tabPageHitTest( const Point& point );
protected:
	class ScrollButton : public PushButton {
	public:
		virtual void paint( GraphicsContext* ctx );
	};

	
	Rect tabAreaBounds_;
	Basic3DBorder activePageBorder_;
	double borderWidth_;
	double tabHeight_;
	//this is to move the whole tab section forwards or backwards when
	//the scroll buttons are clicked
	double tabViewOffset_;
	//ScrollButton* scrollForward_;
	//ScrollButton* scrollBackward_;
	Array<TabPage*> tabPages_;
	TabPage* selectedPage_;
	bool internalTabChange_;

	//void recalcScrollerButtonsPos();

	double getTabPageWidth( TabPage* page, GraphicsContext* ctx=NULL );

	void onScrollButtonClicked( ButtonEvent* e );

	void onTabPageAdded( ListModelEvent* event );

	void onTabPageRemoved( ListModelEvent* event );

	void onTabPageSelected( TabModelEvent* event );

};







#define TABSHEET_CLASSID		"a6186520-7a9c-42eb-b5da-0387685f10ed"
class TabSheet : public Panel {
public:
	TabSheet(): tabPage_(NULL) {
		setBorder( NULL );
		setAlignment( AlignClient );
	}

	virtual void paint( GraphicsContext* ctx );

	TabPage* getPage() {
		return tabPage_;
	}

	void setPage( TabPage* val ) {
		tabPage_ = val;		
	}

	String getTitle() {
		if ( NULL == tabPage_ ) {
			return title_;
		}

		return tabPage_->getPageName();
	}

	void setTitle( const String& val ) {
		title_ = val;
		if ( NULL != tabPage_ ) {
			tabPage_->setPageName( title_ );
		}
	}
protected:
	String title_;
	TabPage* tabPage_;
};



};


#endif // _VCF_TABBEDPAGES_H__

/**
$Id$
*/
