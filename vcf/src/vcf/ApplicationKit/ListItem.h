#ifndef _VCF_LISTITEM_H__
#define _VCF_LISTITEM_H__
//ListItem.h

/*
Copyright 2000-2004 The VCF Project.
Please see License.txt in the top level directory
where you installed the VCF.
*/


#if _MSC_VER > 1000
#   pragma once
#endif


/* Generated by Together */



namespace VCF{
/** @interface */

#define LISTITEM_CLASSID		"ED88C0AB-26AB-11d4-B539-00C04F0196DA"
#define LISTSUBITEM_CLASSID		"565421ca-056a-415c-9936-3649098c66a4"

#define LISTITEM_EVENT_SUBTITEM_ADDED		CUSTOM_EVENT_TYPES + ITEM_CONST + 7
#define LISTITEM_EVENT_SUBTITEM_DELETED		CUSTOM_EVENT_TYPES + ITEM_CONST + 8
#define LISTITEM_EVENT_SUBTITEM_CHANGED		CUSTOM_EVENT_TYPES + ITEM_CONST + 9

class ListItem;
class ListModel;

class APPLICATIONKIT_API ListSubItem : public UIComponent {
public:
	ListSubItem( ListItem* ownerItem ){
		ownerItem_ = ownerItem;
	}

	ListSubItem( ListItem* ownerItem, const String& caption, void* data=NULL );

	ListSubItem():ownerItem_(NULL),data_(NULL){}

	virtual ~ListSubItem(){};

	void* getData() {
		return data_;
	}

	void setData( void* data ) {
		data_ = data;
	}


	String getCaption();

	void setCaption( const String& caption );

	virtual bool canPaint() {
		return false;
	}

	virtual void paint( GraphicsContext* context, Rect* rect, const uint32& column ){}


	ListItem* getListItem() {
		return ownerItem_;
	}

	void setListItem( ListItem* item ) {
		ownerItem_ = item;
	}
protected:
	void* data_;
	ListItem* ownerItem_;
};


	


class ListController {
public:
	virtual ~ListController(){}


	virtual Rect getItemRect( ListItem* item ) = 0;
	virtual void insertItemSubItem( ListItem* item, const uint32& index, ListSubItem* subItem ) = 0;
	virtual void removeItemSubItem( ListItem* item, ListSubItem* subItem ) = 0;
	virtual bool getItemSubItems( ListItem* item, std::vector<ListSubItem*>& subItems ) = 0;
	virtual ListSubItem* getItemSubItem( ListItem* item, const uint32& index ) = 0;
	virtual uint32 getItemSubItemIndex( ListItem* item, ListSubItem* subItem ) = 0;
	virtual uint32 getItemSubItemCount( ListItem* item ) = 0;
	virtual void itemSelected( ListItem* item ) = 0;
};




/**
\class ListItem ListItem.h "vcf/ApplicationKit/ListItem.h"
*/
class APPLICATIONKIT_API ListItem : public Item {
public:

	ListItem(): Item(), index_(0),internalChange_(false) {

	};

	virtual ~ListItem(){};
	
	ListModel* getListModel() {
		return (ListModel*) getModel();
	}

	ListController* getController() {
		return dynamic_cast<ListController*>( getControl() );
	}


	String getCaption() const ;

	void setCaption( const String& caption );

	/**
	Returns the index of the item within it's model.
	*/
    virtual uint32 getIndex() const {
		return index_;
	}

	virtual void setIndex( const uint32& index ) {
		index_ = index;
	}

	ListSubItem* addSubItem( const String& caption, void* data );

	void addSubItem( ListSubItem* subItem );

	void removeSubItem( const uint32& index );

	bool getSubItems( std::vector<ListSubItem*>& subItems );

	ListSubItem* getSubItem( const uint32& index );

	uint32 getSubItemCount();

	virtual void handleEvent( Event* e );
protected:
	uint32 index_;
	bool internalChange_;
};


};


#endif // _VCF_LISTITEM_H__

/**
$Id$
*/
