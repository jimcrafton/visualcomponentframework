#ifndef _VCF_COMPONENTEVENT_H__
#define _VCF_COMPONENTEVENT_H__
//ComponentEvent.h

/*
Copyright 2000-2004 The VCF Project.
Please see License.txt in the top level directory
where you installed the VCF.
*/


#if _MSC_VER > 1000
#   pragma once
#endif


namespace VCF{

class Component;

/**
\class ComponentEvent ComponentEvent.h "vcf/ApplicationKit/ComponentEvent.h"
*ComponentEvent are events generated by changes made to the component.
*Currently there are 2 types, one for the component being created, and
*one for component deletion.
*
*@version 1.0
*@author Jim Crafton
*/
class APPLICATIONKIT_API ComponentEvent : public Event {
public:
	ComponentEvent( Object * source):
		Event( source ),childComponent_(NULL){
	};

	ComponentEvent( Object* source, const uint32& eventType ):
		Event( source, eventType ),childComponent_(NULL){
	};

	virtual ~ComponentEvent(){};

	virtual Object* clone( bool deep=false ) {
		return new ComponentEvent(*this);
	}

	void setChildComponent( Component* val ) {
		childComponent_ = val;
	}

	Component* getChildComponent() {
		return childComponent_;
	}

protected:
	Component* childComponent_;

};

/**
\class ComponentEventHandler ComponentEvent.h "vcf/ApplicationKit/ComponentEvent.h"
*/
template <class SOURCE_TYPE>
class ComponentEventHandler : public EventHandlerInstance<SOURCE_TYPE,ComponentEvent> {
public:
	ComponentEventHandler( SOURCE_TYPE* source,
		_typename_ EventHandlerInstance<SOURCE_TYPE,ComponentEvent>::OnEventHandlerMethod handlerMethod,
		const String& handlerName="") :
			EventHandlerInstance<SOURCE_TYPE,ComponentEvent>( source, handlerMethod, handlerName ) {

	}

	virtual ~ComponentEventHandler(){};

};


};


#endif // _VCF_COMPONENTEVENT_H__

/**
$Id$
*/
