#ifndef _VCF_DATAOBJECT_H__
#define _VCF_DATAOBJECT_H__
//DataObject.h

/*
Copyright 2000-2004 The VCF Project.
Please see License.txt in the top level directory
where you installed the VCF.
*/


#if _MSC_VER > 1000
#   pragma once
#endif


/* Generated by Together */




namespace VCF{


#define  STRING_DATA_TYPE			"text/plain"
#define  RTF_DATA_TYPE				"text/rtf"
#define	 INTEGER_DATA_TYPE			"text/x-vcf-integer"
#define	 OBJECT_DATA_TYPE			"application/x-vcf-object"
#define	 FILE_DATA_TYPE				"application/x-vcf-file"
#define	 BYTE_STREAM_DATA_TYPE		"application/octet-stream"
#define	 IMAGE_DATA_TYPE			"image/x-vcf-image"
#define	 COMPONENT_DATA_TYPE		"text/x-vcf-vff"

/**
\class BinaryPersistable DataObject.h "vcf/ApplicationKit/DataObject.h"
*/
class APPLICATIONKIT_API BinaryPersistable : public Object, public Persistable {
public:
	BinaryPersistable( const unsigned char* dataToInitWith, const unsigned long& dataSize ):
		data_(NULL), dataSize_(dataSize) {

		if ( 0 == dataSize_ ) {
			throw RuntimeException( "Cannot create a BinaryPersistable with 0 length data size" );
		}

		data_ = new unsigned char[dataSize];
		if ( NULL != dataToInitWith ) {
			memcpy( data_, dataToInitWith, dataSize);
		}
	}

	virtual ~BinaryPersistable() {
		delete [] data_;
	}

	virtual void saveToStream( OutputStream * stream )	{
		stream->write( data_, dataSize_ );
	}

    virtual void loadFromStream( InputStream * stream ) {
		stream->read( data_, dataSize_ );
	}

	unsigned char* getData() {
		return data_;
	}

	unsigned long getSize() {
		return dataSize_;
	}
protected:
	unsigned char* data_;
	unsigned long dataSize_;
};

/**
\class DataObject DataObject.h "vcf/ApplicationKit/DataObject.h"
*A DataObject represents a data object in the clipboard.
*Can be streamed out to a stream
*/
class APPLICATIONKIT_API DataObject : public Object {

public:
	//DataObject( const char* dataToInitWith, const unsigned long& dataSize, const String& dataType );

	DataObject();

	virtual ~DataObject();

	void init();

	void addSupportedDataType( const String& dataType, Persistable* dataRepresentation );

	bool isTypeSupported( const String& dataType );

	bool saveToStream( const String& dataType, OutputStream * stream );

	bool loadFromStream( const String& dataType, InputStream * stream );

	Enumerator<String>* getSupportedDataTypes();

protected:
	std::vector<String> types_;
	EnumeratorContainer<std::vector<String>, String> typesContainer_;
	std::map<String,Persistable*> dataMap_;
};


/**
\class TextDataObject DataObject.h "vcf/ApplicationKit/DataObject.h"
*/
class APPLICATIONKIT_API TextDataObject : public DataObject {
public:
	TextDataObject( const String& text="" );

	virtual ~TextDataObject();

	String getTextData();
protected:
	String text_;
};


/**
\class ImageDataObject DataObject.h "vcf/ApplicationKit/DataObject.h"
*/
class APPLICATIONKIT_API ImageDataObject : public DataObject {
public:
	ImageDataObject( Image* image=NULL );

	virtual ~ImageDataObject();

	Image* getImageData();

protected:
	Image* image_;
};


};


#endif // _VCF_DATAOBJECT_H__

/**
$Id$
*/
