#ifndef _VCF_WINDOWEVENT_H__
#define _VCF_WINDOWEVENT_H__
//WindowEvent.h

/*
Copyright 2000-2004 The VCF Project.
Please see License.txt in the top level directory
where you installed the VCF.
*/


#if _MSC_VER > 1000
#   pragma once
#endif


/* Generated by Together */


namespace VCF{

#define WINDOW_CONST					600

#define WINDOW_EVENT_CLOSE				CUSTOM_EVENT_TYPES + WINDOW_CONST + 1
#define WINDOW_EVENT_RESTORE			CUSTOM_EVENT_TYPES + WINDOW_CONST + 2
#define WINDOW_EVENT_MAXIMIZE			CUSTOM_EVENT_TYPES + WINDOW_CONST + 3
#define WINDOW_EVENT_MINIMIZE			CUSTOM_EVENT_TYPES + WINDOW_CONST + 4

/**
\class WindowEvent WindowEvent.h "vcf/ApplicationKit/WindowEvent.h"  
*/
class APPLICATIONKIT_API WindowEvent : public VCF::Event {
public:
	WindowEvent( Object* source ): Event(source) {}

	WindowEvent( Object* source, const unsigned long& eventType ):
		Event(source,eventType) {}

	virtual ~WindowEvent(){};

	virtual Object* clone( bool deep=false ) {
		return new WindowEvent(*this);
	}
private:

};




/**
*WindowEventHandler
handles the following:
	onWindowClose
	onWindowRestore
	onWindowMaximize
	onWindowMinimize
*/
template <class SOURCE_TYPE>
class WindowEventHandler : public EventHandlerInstance<SOURCE_TYPE,WindowEvent>  {
public:
	WindowEventHandler( SOURCE_TYPE* source,
		_typename_ EventHandlerInstance<SOURCE_TYPE,WindowEvent>::OnEventHandlerMethod handlerMethod,
		const String& handlerName="") :
				EventHandlerInstance<SOURCE_TYPE,WindowEvent>( source, handlerMethod, handlerName ) {

	}
};


};


#endif // _VCF_WINDOWEVENT_H__

/**
$Id$
*/
