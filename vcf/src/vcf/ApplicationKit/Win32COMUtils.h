#ifndef _VCF_COMUTILS_H__
#define _VCF_COMUTILS_H__
//COMUtils.h

/*
Copyright 2000-2004 The VCF Project.
Please see License.txt in the top level directory
where you installed the VCF.
*/


#if _MSC_VER > 1000
#   pragma once
#endif


/* Generated by Together */






namespace VCFCOM{


/**
*linker requirements:
*	rpcrt4.lib  - for RPC and UUID stuff
*	shell32.lib	-	for Shell functions
*/
class COMUtils {

public:

    static HRESULT createCOMObject( CLSID clsid, IID interfaceID,
		                             void** object );
	static HRESULT createCOMObject( const VCF::String& progID, IID interfaceID,
		                             void** object );

	static HRESULT BSTRtoString( const BSTR src, VCF::String& dest );

	static HRESULT StringtoBSTR( const VCF::String& src, BSTR& dest );

	static HRESULT UUIDtoString( const UUID id, VCF::String& dest );

	static HRESULT StringtoUUID( const VCF::String& src, UUID& destID );

	static HRESULT makeDefaultFormatETC( const CLIPFORMAT& clipboardFormat, FORMATETC* formatETC );

	static HRESULT getPidlsFromHGlobal(const HGLOBAL HGlob, std::vector<VCF::String>& fileNames  );

	/**
	*Translates a framework defined action type to a windows specific COM drag action.
	*/
	static DWORD translateActionType( const VCF::DragActionType& action );

	static FORMATETC translateDataTypeToWin32( const VCF::String& dataType );

	static VCF::String translateWin32ClipboardFormat( const FORMATETC& formatETC );


	static void registerDataTypes();

	static std::map<VCF::String,UINT> standardWin32DataTypes;

	static VCF::DataObject* getDataObjectFromOLEDataObject( const VCF::String dataType, IDataObject* oleDataObject, FORMATETC* fmtETC );
	static VCF::Persistable* getPersistableFromOLEDataObject( const VCF::String dataType, IDataObject* oleDataObject, FORMATETC* fmtETC );
};

}


#endif // _VCF_COMUTILS_H__

/**
$Id$
*/
